{"version":3,"sources":["state/my-billing-models/hooks.tsx","components/BillingInfoCard/index.tsx","components/SubscriptionInfoCard/index.tsx","components/TransactionDashboardDetails/index.tsx","pages/TransactionDashboard/index.tsx","state/pull-payment-txs/hooks.tsx"],"names":["useAllMyBillingModels","chainId","useActiveWeb3React","state","useSelector","my_billing_models","billingModels","bmType","Object","keys","map","value","index","push","BillingModelTypes","useBillingModel","billingModelType","billingModelId","useBMSubscription","bmSubscriptionId","subscriptions","find","el","id","useSubscriptionsPerBM","TotalWrap","styled","div","BillingInfoCard","props","billingModelDetails","token","useSupportedTokens","className","style","display","justifyContent","name","Number","creationTime","moment","format","decimals","amount","symbol","subscriptionIDs","length","totalPayments","SubscriptionInfoCardContainer","SubscriptionInfoCard","bmSubscription","billingModel","account","pathname","useLocation","supportedTokens","toReadableDate","timestamp","fontWeight","marginBottom","fontSize","marginTop","alignItems","subscriber","Identicon","wallet","startTimestamp","lastPaymentTimestamp","nextPaymentTimestamp","cancelTimestamp","cancelledBy","includes","Single","SingleDynamic","RecurringDynamic","pullPaymentIDs","numberOfPayments","totalAmountPaid","TableTopWrap","StyledTable","table","TABLE_TITLES","TableMarkup","pullPaymentTxs","sellingToken","paymentToken","type","title","undefined","colSpan","Loader","size","key","pullPaymentId","executionTimestamp","href","getEtherscanLink","transactionHash","shortenTxHash","formatUnits","amountPaid","executionFee","amountReceived","BMSubscriptionPaymentsTable","settlementToken","MainContent","StyledLink","a","TransactionDashboard","selectNavToggle","useContext","NavToggle","dispatch","useDispatch","location","query","URLSearchParams","search","get","pull_payment_txs","usePullPaymentTxs","singlePPContract","useSinglePPContract","singleDynamicPPContract","useSingleDynamicPPContract","recurringPPContract","useRecurringPPContract","dynamicRecurringPPContract","useDynamicRecurringPPContract","freeTrialRecurringPPContract","useFreeTrialRecurringPPContract","paidTrialRecurringPPContract","usePaidTrialRecurringPPContract","String","Recurring","RecurringFreeTrial","RecurringPaidTrial","console","warn","useEffect","contractAddress","GET_BM_TYPE_CONTRACT_ADDRESS","fetch","process","method","then","res","json","response","data","ppTx","pullPaymentDetails","executionFeeAmount","receivingAmount","paymentAmount","addPullPaymentTx","pullPaymentTx","catch","error","getPastLogs","useState","showCancelModal","setShowCancelModal","cancelSubscriptionId","setCancelSubscriptionId","cancelSubscriptionBillingModelType","setCancelSubscriptionBillingModelType","isCancelBtnLoading","setIsCancelBtnLoading","gap","justify","color","as","Link","to","src","ArrowRight","alt","isDynamicBM","width","Button","onClick","cancelSubscriptionHandler","CancelSubscriptionModal","isLoading","setIsLoading"],"mappings":"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","file":"static/js/16.85d54bff.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { AppState } from \"../index\";\nimport {\n  SerializedBillingModel,\n  SerializedSubscriptionDetails,\n} from \"../../utils/blockchain-serializers\";\nimport { BillingModelTypes } from \"../../utils\";\n\nexport function useAllMyBillingModels(): SerializedBillingModel[] {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"my_billing_models\"]>(\n    (state) => state.my_billing_models\n  );\n\n  if (!chainId) return [];\n\n  let billingModels: SerializedBillingModel[] = [];\n  for (let bmType in BillingModelTypes) {\n    if (!state[chainId] || !state[chainId][bmType]) {\n      continue;\n    }\n    Object.keys(state[chainId][bmType]).map((value, index) => {\n      billingModels.push(state[chainId][bmType][value]);\n    });\n  }\n\n  return billingModels;\n}\n\nexport function useBillingModel(\n  billingModelType: BillingModelTypes,\n  billingModelId: string\n): SerializedBillingModel | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"my_billing_models\"]>(\n    (state) => state.my_billing_models\n  );\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][billingModelType] ||\n    !state[chainId][billingModelType][billingModelId]\n  )\n    return null;\n\n  return state[chainId][billingModelType][billingModelId];\n}\n\nexport function useBMSubscription(\n  billingModelType: BillingModelTypes,\n  billingModelId: string,\n  bmSubscriptionId: string\n): SerializedSubscriptionDetails | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"my_billing_models\"]>(\n    (state) => state.my_billing_models\n  );\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][billingModelType] ||\n    !state[chainId][billingModelType][billingModelId]\n  )\n    return null;\n\n  return state[chainId][billingModelType][billingModelId].subscriptions.find(\n    (el) => el.id === bmSubscriptionId\n  );\n}\n\nexport function useSubscriptionsPerBM(\n  billingModelType: BillingModelTypes,\n  billingModelId: string\n): SerializedSubscriptionDetails[] {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"my_billing_models\"]>(\n    (state) => state.my_billing_models\n  );\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][billingModelType] ||\n    !state[chainId][billingModelType][billingModelId]\n  )\n    return [];\n\n  return state[chainId][billingModelType][billingModelId].subscriptions;\n}\n\nexport function useSingleBMCount(): number | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"my_billing_models\"]>(\n    (state) => state.my_billing_models\n  );\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][BillingModelTypes.Single] ||\n    !state[chainId][BillingModelTypes.SingleDynamic]\n  )\n    return null;\n  const singleCount = Object.keys(\n    state[chainId][BillingModelTypes.Single]\n  ).length;\n  const singleDynamicCount = Object.keys(\n    state[chainId][BillingModelTypes.SingleDynamic]\n  ).length;\n\n  return singleCount + singleDynamicCount;\n}\n\nexport function useRecurringBMCount(): number | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"my_billing_models\"]>(\n    (state) => state.my_billing_models\n  );\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][BillingModelTypes.Recurring] ||\n    !state[chainId][BillingModelTypes.RecurringDynamic] ||\n    !state[chainId][BillingModelTypes.RecurringFreeTrial] ||\n    !state[chainId][BillingModelTypes.RecurringPaidTrial]\n  )\n    return null;\n\n  const recurringCount = Object.keys(\n    state[chainId][BillingModelTypes.Recurring]\n  ).length;\n  const recurringDynamicCount = Object.keys(\n    state[chainId][BillingModelTypes.RecurringDynamic]\n  ).length;\n  const recurringFreeTrialCount = Object.keys(\n    state[chainId][BillingModelTypes.RecurringFreeTrial]\n  ).length;\n  const recurringPaidTrialCount = Object.keys(\n    state[chainId][BillingModelTypes.RecurringPaidTrial]\n  ).length;\n\n  return (\n    recurringCount +\n    recurringDynamicCount +\n    recurringFreeTrialCount +\n    recurringPaidTrialCount\n  );\n}\n\nexport function useAllMyBillingModelsPerBMType(): {\n  [billingModelType: string]: {\n    [billingModelId: string]: SerializedBillingModel;\n  };\n} {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"my_billing_models\"]>(\n    (state) => state.my_billing_models\n  );\n  return chainId ? state[chainId] ?? {} : {};\n}\n","import styled from \"styled-components\";\nimport { useToken } from \"../../hooks/Tokens\";\nimport moment from \"moment\";\nimport {\n  SerializedBillingModel,\n  SerializedSubscriptionDetails,\n} from \"../../utils/blockchain-serializers\";\nimport { useSupportedTokens } from \"../../state/supported-tokens/hooks\";\n\nconst TotalWrap = styled.div`\n  &:not(:last-child) {\n    border-right: 1px solid #ddd;\n  }\n\n  span.status {\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    background: #27ae60;\n    border-radius: 50%;\n  }\n  h3 {\n    margin: 0;\n    font-weight: 500;\n  }\n\n  padding: 5px 25px;\n  p {\n    font-size: 10px;\n    color: #959595;\n    margin: 0;\n  }\n  h2 {\n    font-size: 10px;\n    font-weight: 100;\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n  }\n`;\n\ninterface BillingInfoCardCardProps {\n  billingModelDetails: SerializedBillingModel;\n}\n\nconst BillingInfoCard = (props?: BillingInfoCardCardProps) => {\n  const billingModelDetails =\n    props && props.billingModelDetails ? props.billingModelDetails : null;\n  const supportedToken = useSupportedTokens();\n  const token = supportedToken[props.billingModelDetails?.token];\n\n  return (\n    <>\n      <div className=\"aside-total\" style={{ display: \"flex\" }}>\n        <TotalWrap className=\"total-earning\">\n          <h2>Billing Model Name</h2>\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <span>\n              {billingModelDetails?.name}\n              {Number(billingModelDetails?.creationTime) > 0 && (\n                <p>\n                  <span className=\"status\" /> Active since{\" \"}\n                  {moment(\n                    Number(billingModelDetails?.creationTime) * 1000\n                  ).format(\"ll\")}\n                </p>\n              )}\n            </span>\n          </div>\n        </TotalWrap>\n        <TotalWrap className=\"total-earning\">\n          <h2>Price, Currency</h2>\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <span>\n              {token?.decimals\n                ? Number(billingModelDetails?.amount) / 10 ** token.decimals\n                : \"Loading...\"}{\" \"}\n              {token?.symbol}\n            </span>\n          </div>\n        </TotalWrap>\n        <TotalWrap className=\"total-earning\">\n          <h2>Charged</h2>\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <span>\n              <h3>\n                {billingModelDetails?.subscriptionIDs.length > 0 &&\n                token?.decimals\n                  ? (Number(billingModelDetails?.amount) /\n                      10 ** token?.decimals) *\n                    billingModelDetails?.totalPayments\n                  : \"0\"}{\" \"}\n                {token?.symbol}\n                <span className=\"small\" />\n              </h3>\n            </span>\n          </div>\n        </TotalWrap>\n      </div>\n    </>\n  );\n};\n\nexport default BillingInfoCard;\n","import moment from \"moment\";\nimport { BillingModelTypes } from \"../../utils\";\nimport { useSupportedTokens } from \"../../state/supported-tokens/hooks\";\nimport Identicon from \"../Identicon\";\nimport styled from \"styled-components\";\nimport { totalAmountPaid } from \"../SubscriptionsTable\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useLocation } from \"react-router-dom\";\n\nconst SubscriptionInfoCardContainer = styled.div`\n   {\n    .details-wrapper {\n      margin-top: 1rem;\n    }\n  }\n`;\nconst SubscriptionInfoCard = ({\n  bmSubscription,\n  billingModel,\n  billingModelType,\n}) => {\n  const { account } = useActiveWeb3React();\n  const { pathname } = useLocation();\n  const supportedTokens = useSupportedTokens();\n\n  const toReadableDate = (timestamp, format?) => {\n    return moment(timestamp * 1000).format(format ? format : \"lll\");\n  };\n\n  const isSingleBM = (): boolean => {\n    return (\n      billingModelType === BillingModelTypes.Single ||\n      billingModelType === BillingModelTypes.SingleDynamic\n    );\n  };\n\n  // console.log(\"pullPayments\", pullPayments);\n  // console.log(\"bmSubscription\", bmSubscription);\n  // console.log(\"billingModel\", billingModel);\n  // console.log(\"billingModelType\", billingModelType);\n\n  return (\n    <SubscriptionInfoCardContainer>\n      <div className=\"subscription-wrapper\">\n        <h3 style={{ fontWeight: 400 }}>Subscription</h3>\n        <div className=\"bg-back\">\n          <p style={{ marginBottom: 0, fontSize: 12, fontWeight: 100 }}>\n            Wallet\n          </p>\n          <h5 style={{ marginTop: 0, display: \"flex\", alignItems: \"center\" }}>\n            {bmSubscription?.subscriber}{\" \"}\n            <Identicon wallet={bmSubscription?.subscriber} />\n          </h5>\n\n          <div className=\"details-wrapper\">\n            {Number(bmSubscription?.startTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>Subscription Since</p>\n                <p style={{ fontSize: \"0.9rem\" }}>\n                  {toReadableDate(bmSubscription?.startTimestamp)}\n                </p>\n              </div>\n            )}\n\n            {Number(bmSubscription?.lastPaymentTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>Last Payment</p>\n                <p style={{ fontSize: \"0.9rem\" }}>\n                  {toReadableDate(bmSubscription?.lastPaymentTimestamp)}\n                </p>\n              </div>\n            )}\n\n            {Number(bmSubscription?.nextPaymentTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>Next Payment</p>\n                <p style={{ fontSize: \"0.9rem\" }}>\n                  {toReadableDate(bmSubscription?.nextPaymentTimestamp)}\n                </p>\n              </div>\n            )}\n\n            {Number(bmSubscription?.cancelTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>\n                  Cancelled by{\" \"}\n                  <span style={{ fontSize: \"0.7rem\" }}>\n                    {(bmSubscription.cancelledBy === account &&\n                      pathname.includes(\"customer\")) ||\n                    (bmSubscription.cancelledBy !== account &&\n                      pathname.includes(\"merchant\"))\n                      ? \"Customer\"\n                      : \"Merchant\"}\n                  </span>{\" \"}\n                  At\n                </p>\n                <p style={{ fontSize: \"0.9rem\" }}>\n                  {toReadableDate(bmSubscription?.cancelTimestamp)}\n                </p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"details-wrapper\">\n            <div className=\"items\">\n              <p>Payments</p>\n              <h6>\n                {isSingleBM()\n                  ? \"Single Payment\"\n                  : billingModelType === BillingModelTypes.RecurringDynamic\n                  ? `${Number(\n                      bmSubscription?.pullPaymentIDs.length\n                    )} / ${Number(bmSubscription?.totalPayments)}`\n                  : `${\n                      bmSubscription\n                        ? billingModel?.numberOfPayments -\n                          bmSubscription?.numberOfPayments\n                        : 0\n                    }/${billingModel?.numberOfPayments}`}\n              </h6>\n            </div>\n            <div className=\"items\">\n              <p>Total Charged</p>\n              <h6 style={{ marginBottom: 0 }}>\n                {totalAmountPaid(\n                  bmSubscription,\n                  billingModel,\n                  billingModelType\n                ) /\n                  10 **\n                    Number(supportedTokens?.[billingModel?.token]?.decimals)}\n                &nbsp;\n                <span className=\"small\">\n                  {supportedTokens[billingModel?.token]?.symbol}\n                </span>\n              </h6>\n            </div>\n            <div className=\"items\" />\n          </div>\n        </div>\n        {/* NOTE: Commenting out for now as this is not implemented at this point\n            Will add them back once the functionality is in place\n         */}\n        {/* <div className=\"btn-wrap\">\n          <div className=\"align-btn\">\n            <button className=\"btn-theme-outlined\">Pause</button>\n            {billingModelingTypeChecked() ? (\n              <button\n                onClick={() => cancelSubscription(bmSubscription?.id)}\n                className=\"btn-theme-outlined\"\n              >\n                Stop\n              </button>\n            ) : (\n              <button className=\"btn-theme-outlined\" disabled>\n                Stop\n              </button>\n            )}\n            <img src={Quest} alt=\"notification\" />\n          </div>\n        </div> */}\n      </div>\n    </SubscriptionInfoCardContainer>\n  );\n};\n\nexport default SubscriptionInfoCard;\n","import styled from \"styled-components\";\nimport Loader from \"../Loader\";\nimport { useSupportedTokens } from \"../../state/supported-tokens/hooks\";\nimport moment from \"moment\";\nimport { getEtherscanLink, formatUnits, shortenTxHash } from \"../../utils\";\nimport { ExternalLink } from \"../../theme\";\nimport React from \"react\";\nimport { useActiveWeb3React } from \"../../hooks\";\n\nconst TableTopWrap = styled.div`\n  display: flex;\n  align-items: center;\n  h3 {\n    font-weight: 400;\n    width: 30%;\n  }\n  .new-billing-model {\n    font-size: 14px;\n    button {\n      padding: 0px;\n      border-radius: 50%;\n      width: 35px;\n      height: 35px;\n      border: 0;\n      background: #7023ff;\n      color: #fff;\n      font-size: 26px;\n      line-height: 35px;\n      margin-left: 10px;\n      cursor: pointer;\n      :hover {\n        background: #9e70f5;\n      }\n    }\n  }\n`;\nconst StyledTable = styled.table`\n  .empty-table-row {\n    text-align: center;\n    font-size: 1rem;\n    line-height: 2rem;\n  }\n  margin-bottom: 100px;\n  border-collapse: collapse;\n  border-spacing: none;\n  width: 100%;\n  border: 1px solid #ddd;\n  caption-side: bottom;\n  empty-cell: show | hide;\n  empty-cell is a property of table or the cells themselves\n\n\tvertical-align: baseline | sub | super | text-top |\n\ttext-bottom | middle | top | bottom |\n\t<percentage> | <length>\n\n   tbody {\n    vertical-align: top;\n  }\n  td,\n  th {\n    border: 1px solid #ccc;\n  }\n  thead tr th:nth-child(3) {\n    width: 20%;\n  }\n\n  thead tr th:nth-child(7) {\n    width: 10%;\n  }\n  td:nth-child(3) {\n    color: #7023ff;\n  }\n  td {\n    padding: 10px 10px;\n    font-size: 12px;\n    border: 1px solid #eae8ee;\n    color: #756f82;\n    :first-child {\n      border-left: none;\n    }\n    :last-child {\n      border-right: none;\n    }\n  }\n  th {\n    padding: 10px 10px;\n    font-size: 12px;\n    border: 1px solid #eae8ee;\n    text-align: left;\n    font-weight: normal;\n    :first-child {\n      border-left: none;\n    }\n    :last-child {\n      border-right: none;\n    }\n  }\n  tbody {\n    position: relative;\n  }\n\n  tbody tr {\n    background-color: #fff;\n    :hover {\n      background-color: #f7f6f9;\n    }\n  }\n  thead > tr {\n    background-color: #f7f6f9;\n  }\n  small {\n    padding: 7px;\n    border-radius: 7px;\n  }\n  small.SUCCESS {\n    color: #00996d;\n    background: #e5fff8;\n  }\n  small.PENDING {\n    color: #b28824;\n    background: #fff7e5;\n  }\n  small.REJECTED {\n    color: #ff647c;\n    background: #ffe5e9;\n  }\n  tbody > span {\n    position: absolute;\n    left: 48%;\n    top: 22px;\n  }\n  .loader-main {\n    position: absolute;\n    margin: 1rem auto;\n    left: 50%;\n  }\n`;\n\nconst TABLE_TITLES = [\n  \"No.\",\n  \"Date\",\n  \"Transaction ID\",\n  // \"Currency\",\n  // \"Settlement Currency\",\n  // \"Rate\",\n  \"Amount Paid\",\n  \"Execution Fee\",\n  \"Amount Received\",\n  \"Status\",\n  // \"Refund\",\n];\n\nconst BMSubscriptionPaymentsTable = ({ pullPaymentTxs, bmSubscription }) => {\n  // console.log(\"pullPaymentTxs\", pullPaymentTxs);\n  const supportedTokens = useSupportedTokens();\n\n  return (\n    <TableMarkup\n      pullPaymentTxs={pullPaymentTxs}\n      sellingToken={supportedTokens[bmSubscription?.settlementToken]}\n      paymentToken={supportedTokens[bmSubscription?.paymentToken]}\n    />\n  );\n};\n\nconst TableMarkup = ({ pullPaymentTxs, sellingToken, paymentToken }) => {\n  const { chainId } = useActiveWeb3React();\n  return (\n    <>\n      <div>\n        <TableTopWrap className=\"table-top\">\n          <h3>Payments</h3>\n        </TableTopWrap>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>\n                <input type=\"checkbox\" value=\"select\" />\n              </th>\n              {TABLE_TITLES.map((title, index) => (\n                <th key={index}>{title}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {pullPaymentTxs === undefined || pullPaymentTxs === null ? (\n              <tr>\n                <td colSpan={12}>\n                  <div>\n                    <Loader className=\"loader-main\" size={\"3rem\"} />\n                  </div>\n                </td>\n              </tr>\n            ) : Object.keys(pullPaymentTxs).length > 0 ? (\n              Object.keys(pullPaymentTxs)?.map((key, index) => (\n                <tr key={pullPaymentTxs[key]?.transactionHash}>\n                  <td>\n                    {\" \"}\n                    <input type=\"checkbox\" value=\"select\" />{\" \"}\n                  </td>\n                  <td>\n                    <span className=\"model-target\">\n                      {pullPaymentTxs[key]?.pullPaymentId}\n                    </span>\n                  </td>\n                  <td>\n                    {moment(\n                      pullPaymentTxs[key].executionTimestamp * 1000\n                    ).format(\"lll\")}\n                  </td>\n                  <td>\n                    <ExternalLink\n                      href={getEtherscanLink(\n                        chainId,\n                        pullPaymentTxs[key]?.transactionHash,\n                        \"transaction\"\n                      )}\n                      style={{ fontSize: \"14px\" }}\n                    >\n                      {shortenTxHash(pullPaymentTxs[key]?.transactionHash)}\n                    </ExternalLink>\n                  </td>\n                  {/*<td>{\"TOKEN\"}</td>*/}\n                  {/* <td>{row[\"Settlement Currency\"]}</td> */}\n                  {/* <td>{row[\"Rate\"]}</td> */}\n                  <td>\n                    ~\n                    {formatUnits(\n                      pullPaymentTxs[key]?.amountPaid === \"undefined\"\n                        ? 0\n                        : pullPaymentTxs[key]?.amountPaid,\n                      paymentToken?.decimals\n                    )}\n                    &nbsp; {paymentToken?.symbol}\n                  </td>\n                  <td>\n                    ~\n                    {formatUnits(\n                      pullPaymentTxs[key]?.executionFee === \"undefined\"\n                        ? 0\n                        : pullPaymentTxs[key]?.executionFee,\n                      paymentToken?.decimals\n                    )}\n                    &nbsp;{paymentToken?.symbol}\n                  </td>\n                  <td>\n                    ~\n                    {formatUnits(\n                      pullPaymentTxs[key]?.amountReceived === \"undefined\"\n                        ? 0\n                        : pullPaymentTxs[key]?.amountReceived,\n                      sellingToken?.decimals\n                    )}\n                    &nbsp;{sellingToken?.symbol}\n                  </td>\n                  <td>\n                    <small className={\"SUCCESS\"}>SUCCESS</small>\n                  </td>\n                  {/* <td>{row[\"Refund\"]}</td> */}\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan={12}>\n                  <div className=\"empty-table-row\">\n                    <span>No payments</span>\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </StyledTable>\n      </div>\n    </>\n  );\n};\n\nexport default BMSubscriptionPaymentsTable;\n","import { useContext, useEffect, useState } from \"react\";\nimport { AutoColumn } from \"../../components/Column\";\nimport styled from \"styled-components\";\nimport SubscriptionInfoCard from \"../../components/SubscriptionInfoCard\";\nimport ArrowRight from \"../../assets/images/back-arrow.svg\";\nimport { NavToggle } from \"../App\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { BillingModelTypes, isDynamicBM } from \"../../utils\";\nimport BillingInfoCard from \"../../components/BillingInfoCard\";\nimport {\n  useBillingModel,\n  useBMSubscription,\n} from \"../../state/my-billing-models/hooks\";\nimport BMSubscriptionPaymentsTable from \"../../components/TransactionDashboardDetails\";\nimport {\n  getPastLogs,\n  usePullPaymentTxs,\n} from \"../../state/pull-payment-txs/hooks\";\nimport {\n  useDynamicRecurringPPContract,\n  useFreeTrialRecurringPPContract,\n  usePaidTrialRecurringPPContract,\n  useRecurringPPContract,\n  useSingleDynamicPPContract,\n  useSinglePPContract,\n} from \"../../hooks/useContract\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../state\";\nimport { ButtonLight, ButtonPrimary } from \"../../components/Button\";\nimport CancelSubscriptionModal from \"../../components/CancelSubscriptionModal\";\n\nconst MainContent = styled.div`\n  color: #000;\n  &.open {\n    padding-left: 220px;\n    padding-right: 2rem;\n  }\n  .table-top {\n    margin-top: 30px;\n  }\n  .subscription-wrapper {\n    .btn-wrap .align-btn {\n      display: flex;\n      align-items: center;\n\n      button.btn-theme-outlined {\n        background: #fff;\n        border: 1px solid #b2acbf;\n        padding: 9px 25px;\n        border-radius: 6px;\n        font-size: 12px;\n        min-width: 97px;\n      }\n    }\n\n    .btn-wrap {\n      margin-top: 20px;\n      .align-btn button {\n        margin-right: 5px;\n      }\n    }\n\n    h3,\n    h4,\n    h5 {\n      font-weight: 500;\n    }\n    .bg-back {\n      background: #f8f5ff;\n      padding: 10px 20px;\n    }\n\n    .bg-back .details-wrapper {\n      display: flex;\n    }\n\n    .bg-back .details-wrapper .items {\n      width: 160px;\n    }\n\n    .bg-back .details-wrapper .items p {\n      margin-bottom: 0;\n      font-size: 12px;\n      color: #444;\n    }\n\n    .bg-back .details-wrapper .items h5,\n    .bg-back .details-wrapper .items h3 {\n      margin-top: 5px;\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 20px;\n    select {\n      border: none;\n    }\n    .navigation {\n      display: flex;\n      p {\n        background: #ededed;\n        border-radius: 5px;\n        padding: 8px 14px;\n        margin: 0 5px;\n      }\n    }\n  }\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  padding-left: 100px;\n\n  .top-wrap {\n    margin-top: 20px;\n    display: flex;\n    justify-content: space-between;\n    > div:first-child {\n      width: 35%;\n    }\n  }\n`;\nconst StyledLink = styled.a`\n  &:hover {\n    .sidebar-text {\n      color: #7023FF;\n    }\n    .default {\n      display: none;\n    }\n    .focus {\n      display: inline;\n    }\n  }\n  display: flex;\n  font-size: 13px;\n  margin: auto 0;\n  text-decoration: none;\n  .focus {\n    display: none;\n  }\n  img {\n    margin-right: 10px;\n  }\n}`;\n\nfunction TransactionDashboard() {\n  const selectNavToggle = useContext(NavToggle);\n  const { chainId } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const location = useLocation();\n  const query = new URLSearchParams(location?.search);\n\n  const billingModelType = query.get(\"billing-model-type\");\n  const billingModelId = query.get(\"billing-model-id\");\n  const bmSubscriptionId = query.get(\"subscription-id\");\n\n  const billingModelDetails = useBillingModel(\n    BillingModelTypes[billingModelType],\n    billingModelId\n  );\n  const bmSubscription = useBMSubscription(\n    BillingModelTypes[billingModelType],\n    billingModelId,\n    bmSubscriptionId\n  );\n\n  const pullPaymentTxs = usePullPaymentTxs(\n    BillingModelTypes[billingModelType],\n    billingModelId,\n    bmSubscriptionId\n  );\n\n  const singlePPContract = useSinglePPContract();\n  const singleDynamicPPContract = useSingleDynamicPPContract();\n  const recurringPPContract = useRecurringPPContract();\n  const dynamicRecurringPPContract = useDynamicRecurringPPContract();\n  const freeTrialRecurringPPContract = useFreeTrialRecurringPPContract();\n  const paidTrialRecurringPPContract = usePaidTrialRecurringPPContract();\n\n  let contract;\n  switch (String(BillingModelTypes[billingModelType])) {\n    case String(BillingModelTypes.Single): {\n      contract = singlePPContract;\n      break;\n    }\n    case String(BillingModelTypes.SingleDynamic): {\n      contract = singleDynamicPPContract;\n      break;\n    }\n    case String(BillingModelTypes.Recurring): {\n      contract = recurringPPContract;\n      break;\n    }\n    case String(BillingModelTypes.RecurringDynamic): {\n      contract = dynamicRecurringPPContract;\n      break;\n    }\n    case String(BillingModelTypes.RecurringFreeTrial): {\n      contract = freeTrialRecurringPPContract;\n      break;\n    }\n    case String(BillingModelTypes.RecurringPaidTrial): {\n      contract = paidTrialRecurringPPContract;\n      break;\n    }\n    default: {\n      console.warn(`Unsupported Billing Model Type - ${billingModelType}`);\n      break;\n    }\n  }\n\n  useEffect(() => {\n    if (\n      !pullPaymentTxs ||\n      (pullPaymentTxs &&\n        Object.keys(pullPaymentTxs).length !==\n          bmSubscription?.pullPaymentIDs?.length)\n    ) {\n      getPastLogs(\n        chainId,\n        BillingModelTypes[billingModelType],\n        billingModelId,\n        bmSubscriptionId,\n        dispatch\n      );\n    }\n  }, []);\n\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [cancelSubscriptionId, setCancelSubscriptionId] = useState(null);\n  const [\n    cancelSubscriptionBillingModelType,\n    setCancelSubscriptionBillingModelType,\n  ] = useState(null);\n  const [isCancelBtnLoading, setIsCancelBtnLoading] = useState(false);\n\n  const cancelSubscriptionHandler = (bmSubscriptionId, bmType) => {\n    setCancelSubscriptionId(bmSubscriptionId);\n    setCancelSubscriptionBillingModelType(bmType);\n    setShowCancelModal(true);\n  };\n\n  return (\n    <>\n      <MainContent\n        className={\n          selectNavToggle ? \"SubscriptionModel open\" : \"SubscriptionModel\"\n        }\n      >\n        <div className=\"top-wrap\">\n          <AutoColumn gap=\"lg\" justify=\"flex-start\">\n            <StyledLink\n              style={{ color: \"#756F82\", marginBottom: \"1rem\" }}\n              as={Link}\n              to={`/merchant/billing-model-details?billing-model-type=${billingModelType}&billing-model-id=${billingModelId}`}\n            >\n              {\" \"}\n              <img src={ArrowRight} alt=\"arrow\" /> Back to Customers\n            </StyledLink>\n          </AutoColumn>\n          {!isDynamicBM(BillingModelTypes[billingModelType]) && (\n            <BillingInfoCard billingModelDetails={billingModelDetails} />\n          )}\n        </div>\n        <SubscriptionInfoCard\n          bmSubscription={bmSubscription}\n          billingModel={billingModelDetails}\n          billingModelType={billingModelType}\n        />\n        <AutoColumn gap=\"lg\" justify=\"flex-start\" style={{ marginTop: \"1rem\" }}>\n          <div style={{ width: \"10%\" }}>\n            <ButtonLight\n              onClick={() => {\n                cancelSubscriptionHandler(bmSubscription.id, billingModelType);\n              }}\n            >\n              CANCEL\n            </ButtonLight>\n          </div>\n        </AutoColumn>\n        <BMSubscriptionPaymentsTable\n          pullPaymentTxs={pullPaymentTxs}\n          bmSubscription={bmSubscription}\n        />\n        <CancelSubscriptionModal\n          cancelSubscriptionId={cancelSubscriptionId}\n          billingModelType={cancelSubscriptionBillingModelType}\n          showCancelModal={showCancelModal}\n          setShowCancelModal={setShowCancelModal}\n          isLoading={isCancelBtnLoading}\n          setIsLoading={setIsCancelBtnLoading}\n        />\n      </MainContent>\n    </>\n  );\n}\n\nexport default TransactionDashboard;\n","import { BillingModelTypes, GET_BM_TYPE_CONTRACT_ADDRESS } from \"../../utils\";\nimport { addPullPaymentTx } from \"./actions\";\nimport { ChainId } from \"../../constants\";\nimport { useActiveWeb3React } from \"../../hooks\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../index\";\n\nexport interface IPullPaymentDetails {\n  pullPaymentId: string;\n  transactionHash: string;\n  executionTimestamp: string;\n  executionFee: number;\n  amountReceived: number;\n  amountPaid: number;\n}\n\nexport function usePullPaymentTxs(\n  billingModelType: BillingModelTypes,\n  billingModelId: string,\n  bmSubscriptionId: string\n):\n  | {\n      [txHash: string]: IPullPaymentDetails;\n    }\n  | null\n  | {} {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState[\"pull_payment_txs\"]>(\n    (state) => state.pull_payment_txs\n  );\n\n  if (!chainId || !state[chainId]) return null;\n\n  if (\n    !state[chainId][`${billingModelType}_${billingModelId}_${bmSubscriptionId}`]\n  )\n    return {};\n\n  return state[chainId][\n    `${billingModelType}_${billingModelId}_${bmSubscriptionId}`\n  ];\n}\n\nexport function getPastLogs(\n  chainId: ChainId,\n  billingModelType: BillingModelTypes,\n  billingModelId: string,\n  bmSubscriptionId: string,\n  dispatch\n) {\n  const PPP_API_BASE_URL =\n    process.env.REACT_APP_API_BASE_URL || \"https://stgp3api.pumapay.io\";\n\n  const contractAddress = GET_BM_TYPE_CONTRACT_ADDRESS(\n    chainId,\n    billingModelType\n  );\n\n  fetch(\n    `${PPP_API_BASE_URL}/pull-payment-txs/${chainId}/${contractAddress}/${billingModelId}/${bmSubscriptionId}`,\n    {\n      method: \"GET\",\n    }\n  )\n    .then((res) => res.json())\n    .then((response) => {\n      for (let ppTx of response.data) {\n        const pullPaymentDetails: IPullPaymentDetails = {\n          transactionHash: ppTx.transactionHash,\n          pullPaymentId: ppTx.pullPaymentId,\n          executionTimestamp: ppTx.executionTimestamp,\n          executionFee: ppTx.executionFeeAmount,\n          amountReceived: ppTx.receivingAmount,\n          amountPaid: ppTx.paymentAmount,\n        };\n\n        dispatch(\n          addPullPaymentTx({\n            chainId,\n            billingModelType,\n            billingModelId,\n            bmSubscriptionId,\n            pullPaymentTx: pullPaymentDetails,\n          })\n        );\n      }\n    })\n    .catch((error) => console.error(error));\n}\n"],"sourceRoot":""}
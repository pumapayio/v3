{"version":3,"sources":["state/my-billing-models/hooks.tsx","components/BillingInfoCard/index.tsx","components/SubscriptionInfoCard/index.tsx","hooks/useGetPullpayments.ts","components/TransactionDashboardDetails/index.tsx","constants/subgraphs/index.ts","utils/getApolloProvider.ts","pages/TransactionDashboard/index.tsx"],"names":["useAllMyBillingModels","chainId","useActiveWeb3React","state","useSelector","my_billing_models","billingModels","bmType","Object","keys","map","value","index","push","BillingModelTypes","useBillingModel","billingModelType","billingModelId","useBMSubscription","bmSubscriptionId","subscriptions","find","el","id","useSubscriptionsPerBM","TotalWrap","styled","div","BillingInfoCard","props","billingModelDetails","token","useSupportedTokens","className","style","display","justifyContent","name","Number","creationTime","moment","format","decimals","amount","symbol","subscriptionIDs","length","totalPayments","SubscriptionInfoCardContainer","SubscriptionInfoCard","bmSubscription","billingModel","account","pathname","useLocation","supportedTokens","isLowBalanceCancel","String","cancelledBy","toLowerCase","KEEPER_REGISTRY_ADDRESS","toReadableDate","timestamp","fontWeight","marginBottom","fontSize","marginTop","alignItems","subscriber","Identicon","wallet","startTimestamp","lastPaymentTimestamp","nextPaymentTimestamp","cancelTimestamp","numberOfPayments","includes","Single","SingleDynamic","RecurringDynamic","pullPaymentIDs","totalAmountPaid","settlementToken","RECURRING_PULLPAYMENTS_QUERY","gql","RECURRING_DYNAMIC_PULLPAYMENTS_QUERY","SINGLE_PULLPAYMENTS_QUERY","SINGLE_DYNAMIC_PULLPAYMENTS_QUERY","PullPaymentsData","_chainId","_pullPaymentType","_billingModelId","_subscriptionId","_count","_skipCount","_orderData","_direction","query","Recurring","RecurringFreeTrial","RecurringPaidTrial","getQuery","useQuery","variables","ppAddress","GET_BM_TYPE_CONTRACT_ADDRESS","bmId","subscriptionId","count","skipCount","data","direction","fetchPolicy","pollInterval","loading","error","console","log","Error","useGetPullPayments","orderData","res","pullPayments","recurringDynamicPullPayments","singleDynamicSubscriptions","singleSubscriptions","pps","pp","pullPaymentId","pullpaymentId","transactionHash","split","executionTimestamp","subscriptionTime","executionFee","amountReceived","receiverAmount","amountPaid","userAmount","TableTopWrap","StyledTable","table","TABLE_TITLES","TableMarkup","pullPaymentTxs","sellingToken","paymentToken","type","title","undefined","colSpan","Loader","size","key","href","getEtherscanLink","shortenTxHash","formatUnits","BMSubscriptionPaymentsTable","pullPaymentType","ppTxs","PULLPAYMENT_SUBGRAPH_URL","errorLink","onError","graphQLErrors","message","MainContent","StyledLink","a","TransactionDashboard","selectNavToggle","useContext","NavToggle","location","useDispatch","URLSearchParams","search","get","isCancelDisabled","isCancelVisible","client","subgraphLink","from","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","GetApolloProvider","singlePPContract","useSinglePPContract","singleDynamicPPContract","useSingleDynamicPPContract","recurringPPContract","useRecurringPPContract","dynamicRecurringPPContract","useDynamicRecurringPPContract","freeTrialRecurringPPContract","useFreeTrialRecurringPPContract","paidTrialRecurringPPContract","usePaidTrialRecurringPPContract","warn","useState","showCancelModal","setShowCancelModal","cancelSubscriptionId","setCancelSubscriptionId","cancelSubscriptionBillingModelType","setCancelSubscriptionBillingModelType","isCancelBtnLoading","setIsCancelBtnLoading","gap","justify","color","as","Link","to","src","ArrowRight","alt","isDynamicBM","width","Button","disabled","onClick","cancelSubscriptionHandler","ApolloProvider","CancelSubscriptionModal","isLoading","setIsLoading"],"mappings":"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","file":"static/js/17.1b0b5463.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { AppState } from '../index';\nimport { SerializedBillingModel, SerializedSubscriptionDetails } from '../../utils/blockchain-serializers';\nimport { BillingModelTypes } from '../../utils';\n\nexport function useAllMyBillingModels(): SerializedBillingModel[] {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['my_billing_models']>(state => state.my_billing_models);\n\n  if (!chainId) return [];\n\n  let billingModels: SerializedBillingModel[] = [];\n  for (let bmType in BillingModelTypes) {\n    if (!state[chainId] || !state[chainId][bmType]) {\n      continue;\n    }\n    Object.keys(state[chainId][bmType]).map((value, index) => {\n      billingModels.push(state[chainId][bmType][value]);\n    });\n  }\n\n  return billingModels;\n}\n\nexport function useBillingModel(\n  billingModelType: BillingModelTypes,\n  billingModelId: string,\n): SerializedBillingModel | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['my_billing_models']>(state => state.my_billing_models);\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][billingModelType] ||\n    !state[chainId][billingModelType][billingModelId]\n  )\n    return null;\n\n  return state[chainId][billingModelType][billingModelId];\n}\n\nexport function useBMSubscription(\n  billingModelType: BillingModelTypes,\n  billingModelId: string,\n  bmSubscriptionId: string,\n): SerializedSubscriptionDetails | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['my_billing_models']>(state => state.my_billing_models);\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][billingModelType] ||\n    !state[chainId][billingModelType][billingModelId]\n  )\n    return null;\n\n  return state[chainId][billingModelType][billingModelId].subscriptions.find(el => el.id === bmSubscriptionId);\n}\n\nexport function useSubscriptionsPerBM(\n  billingModelType: BillingModelTypes,\n  billingModelId: string,\n): SerializedSubscriptionDetails[] {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['my_billing_models']>(state => state.my_billing_models);\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][billingModelType] ||\n    !state[chainId][billingModelType][billingModelId]\n  )\n    return [];\n\n  return state[chainId][billingModelType][billingModelId].subscriptions;\n}\n\nexport function useSingleBMCount(): number | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['my_billing_models']>(state => state.my_billing_models);\n\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][BillingModelTypes.Single] ||\n    !state[chainId][BillingModelTypes.SingleDynamic]\n  )\n    return null;\n  const singleCount = Object.keys(state[chainId][BillingModelTypes.Single]).length;\n  const singleDynamicCount = Object.keys(state[chainId][BillingModelTypes.SingleDynamic]).length;\n\n  return singleCount + singleDynamicCount;\n}\n\nexport function useRecurringBMCount(): number | null {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['my_billing_models']>(state => state.my_billing_models);\n  if (\n    !chainId ||\n    !state[chainId] ||\n    !state[chainId][BillingModelTypes.Recurring] ||\n    !state[chainId][BillingModelTypes.RecurringDynamic] ||\n    !state[chainId][BillingModelTypes.RecurringFreeTrial] ||\n    !state[chainId][BillingModelTypes.RecurringPaidTrial]\n  )\n    return null;\n\n  const recurringCount = Object.keys(state[chainId][BillingModelTypes.Recurring]).length;\n  const recurringDynamicCount = Object.keys(state[chainId][BillingModelTypes.RecurringDynamic]).length;\n  const recurringFreeTrialCount = Object.keys(state[chainId][BillingModelTypes.RecurringFreeTrial]).length;\n  const recurringPaidTrialCount = Object.keys(state[chainId][BillingModelTypes.RecurringPaidTrial]).length;\n\n  return recurringCount + recurringDynamicCount + recurringFreeTrialCount + recurringPaidTrialCount;\n}\n\nexport function useAllMyBillingModelsPerBMType(): {\n  [billingModelType: string]: {\n    [billingModelId: string]: SerializedBillingModel;\n  };\n} {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['my_billing_models']>(state => state.my_billing_models);\n  return chainId ? state[chainId] ?? {} : {};\n}\n","import styled from 'styled-components';\nimport moment from 'moment';\nimport { SerializedBillingModel, SerializedSubscriptionDetails } from '../../utils/blockchain-serializers';\nimport { useSupportedTokens } from '../../state/supported-tokens/hooks';\n\nconst TotalWrap = styled.div`\n  &:not(:last-child) {\n    border-right: 1px solid #ddd;\n  }\n\n  span.status {\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    background: #27ae60;\n    border-radius: 50%;\n  }\n  h3 {\n    margin: 0;\n    font-weight: 500;\n  }\n\n  padding: 5px 25px;\n  p {\n    font-size: 10px;\n    color: #959595;\n    margin: 0;\n  }\n  h2 {\n    font-size: 10px;\n    font-weight: 100;\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n  }\n`;\n\ninterface BillingInfoCardCardProps {\n  billingModelDetails: SerializedBillingModel;\n}\n\nconst BillingInfoCard = (props?: BillingInfoCardCardProps) => {\n  const billingModelDetails = props && props.billingModelDetails ? props.billingModelDetails : null;\n  const supportedToken = useSupportedTokens();\n  const token = supportedToken[props.billingModelDetails?.token];\n\n  return (\n    <>\n      <div className=\"aside-total\" style={{ display: 'flex' }}>\n        <TotalWrap className=\"total-earning\">\n          <h2>Billing Model Name</h2>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span>\n              {billingModelDetails?.name}\n              {Number(billingModelDetails?.creationTime) > 0 && (\n                <p>\n                  <span className=\"status\" /> Active since{' '}\n                  {moment(Number(billingModelDetails?.creationTime) * 1000).format('ll')}\n                </p>\n              )}\n            </span>\n          </div>\n        </TotalWrap>\n        <TotalWrap className=\"total-earning\">\n          <h2>Price, Currency</h2>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span>\n              {token?.decimals ? Number(billingModelDetails?.amount) / 10 ** token.decimals : 'Loading...'}{' '}\n              {token?.symbol}\n            </span>\n          </div>\n        </TotalWrap>\n        <TotalWrap className=\"total-earning\">\n          <h2>Charged</h2>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span>\n              <h3>\n                {billingModelDetails?.subscriptionIDs.length > 0 && token?.decimals\n                  ? (Number(billingModelDetails?.amount) / 10 ** token?.decimals) * billingModelDetails?.totalPayments\n                  : '0'}{' '}\n                {token?.symbol}\n                <span className=\"small\" />\n              </h3>\n            </span>\n          </div>\n        </TotalWrap>\n      </div>\n    </>\n  );\n};\n\nexport default BillingInfoCard;\n","import moment from 'moment';\nimport { BillingModelTypes } from '../../utils';\nimport { useSupportedTokens } from '../../state/supported-tokens/hooks';\nimport Identicon from '../Identicon';\nimport styled from 'styled-components';\nimport { totalAmountPaid } from '../SubscriptionsTable';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useLocation } from 'react-router-dom';\nimport KEEPER_REGISTRY_ADDRESS from '../../constants/contracts/keeperRegistry';\n\nconst SubscriptionInfoCardContainer = styled.div`\n   {\n    .details-wrapper {\n      margin-top: 1rem;\n    }\n  }\n`;\nconst SubscriptionInfoCard = ({ bmSubscription, billingModel, billingModelType }) => {\n  const { account, chainId } = useActiveWeb3React();\n  const { pathname } = useLocation();\n  const supportedTokens = useSupportedTokens();\n\n  const isLowBalanceCancel =\n    bmSubscription &&\n    String(bmSubscription?.cancelledBy?.toLowerCase()) === String(KEEPER_REGISTRY_ADDRESS[chainId].toLowerCase());\n\n  const toReadableDate = (timestamp, format?) => {\n    return moment(timestamp * 1000).format(format ? format : 'lll');\n  };\n\n  const isSingleBM = (): boolean => {\n    return billingModelType === BillingModelTypes.Single || billingModelType === BillingModelTypes.SingleDynamic;\n  };\n\n  // console.log(\"pullPayments\", pullPayments);\n  // console.log(\"bmSubscription\", bmSubscription);\n  // console.log(\"billingModel\", billingModel);\n  // console.log(\"billingModelType\", billingModelType);\n\n  return (\n    <SubscriptionInfoCardContainer>\n      <div className=\"subscription-wrapper\">\n        <h3 style={{ fontWeight: 400 }}>Subscription</h3>\n        <div className=\"bg-back\">\n          <p style={{ marginBottom: 0, fontSize: 12, fontWeight: 100 }}>Wallet</p>\n          <h5 style={{ marginTop: 0, display: 'flex', alignItems: 'center' }}>\n            {bmSubscription?.subscriber} <Identicon wallet={bmSubscription?.subscriber} />\n          </h5>\n\n          <div className=\"details-wrapper\">\n            {Number(bmSubscription?.startTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>Subscription Since</p>\n                <p style={{ fontSize: '0.9rem' }}>{toReadableDate(bmSubscription?.startTimestamp)}</p>\n              </div>\n            )}\n\n            {Number(bmSubscription?.lastPaymentTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>Last Payment</p>\n                <p style={{ fontSize: '0.9rem' }}>{toReadableDate(bmSubscription?.lastPaymentTimestamp)}</p>\n              </div>\n            )}\n\n            {Number(bmSubscription?.nextPaymentTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>Next Payment</p>\n                <p style={{ fontSize: '0.9rem' }}>\n                  {Number(bmSubscription?.cancelTimestamp) !== 0 || Number(bmSubscription?.numberOfPayments) === 0\n                    ? 'No future payment'\n                    : toReadableDate(bmSubscription?.nextPaymentTimestamp)}\n                </p>\n              </div>\n            )}\n\n            {Number(bmSubscription?.cancelTimestamp) > 0 && (\n              <div className=\"items\">\n                <p>\n                  Cancelled by{' '}\n                  <span style={{ fontSize: '0.7rem' }}>\n                    {isLowBalanceCancel\n                      ? 'Low balance'\n                      : (bmSubscription.cancelledBy === account && pathname.includes('customer')) ||\n                        (bmSubscription.cancelledBy !== account && pathname.includes('merchant'))\n                      ? 'Customer'\n                      : 'Merchant'}\n                  </span>{' '}\n                  At\n                </p>\n                <p style={{ fontSize: '0.9rem' }}>{toReadableDate(bmSubscription?.cancelTimestamp)}</p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"details-wrapper\">\n            <div className=\"items\">\n              <p>Payments</p>\n              <h6>\n                {isSingleBM()\n                  ? 'Single Payment'\n                  : billingModelType === BillingModelTypes.RecurringDynamic\n                  ? `${Number(bmSubscription?.pullPaymentIDs.length)} / ${Number(bmSubscription?.totalPayments)}`\n                  : `${bmSubscription ? billingModel?.numberOfPayments - bmSubscription?.numberOfPayments : 0}/${\n                      billingModel?.numberOfPayments\n                    }`}\n              </h6>\n            </div>\n            <div className=\"items\">\n              <p>Total Charged</p>\n              <h6 style={{ marginBottom: 0 }}>\n                {totalAmountPaid(bmSubscription, billingModel, billingModelType) /\n                  10 ** Number(supportedTokens?.[bmSubscription?.settlementToken]?.decimals)}\n                &nbsp;\n                <span className=\"small\">{supportedTokens[bmSubscription?.settlementToken]?.symbol}</span>\n              </h6>\n            </div>\n            <div className=\"items\" />\n          </div>\n        </div>\n        {/* NOTE: Commenting out for now as this is not implemented at this point\n            Will add them back once the functionality is in place\n         */}\n        {/* <div className=\"btn-wrap\">\n          <div className=\"align-btn\">\n            <button className=\"btn-theme-outlined\">Pause</button>\n            {billingModelingTypeChecked() ? (\n              <button\n                onClick={() => cancelSubscription(bmSubscription?.id)}\n                className=\"btn-theme-outlined\"\n              >\n                Stop\n              </button>\n            ) : (\n              <button className=\"btn-theme-outlined\" disabled>\n                Stop\n              </button>\n            )}\n            <img src={Quest} alt=\"notification\" />\n          </div>\n        </div> */}\n      </div>\n    </SubscriptionInfoCardContainer>\n  );\n};\n\nexport default SubscriptionInfoCard;\n","import { DocumentNode, gql, TypedDocumentNode, useLazyQuery, useQuery } from '@apollo/client';\nimport { useActiveWeb3React } from '.';\nimport { ChainId } from '../constants';\nimport { IPullPaymentDetails } from '../Types';\nimport { BillingModelTypes, GET_BM_TYPE_CONTRACT_ADDRESS } from '../utils';\n\nconst RECURRING_PULLPAYMENTS_QUERY = gql`\n  query GetDetails(\n    $ppAddress: String!\n    $bmId: String!\n    $subscriptionId: String!\n    $count: Int!\n    $skipCount: Int!\n    $data: String\n    $direction: String\n  ) {\n    pullPayments(\n      first: $count\n      skip: $skipCount\n      where: { pullPaymentAddress: $ppAddress, billingModelId: $bmId, subscriptionId: $subscriptionId }\n    ) {\n      id\n      pullPaymentAddress\n      pullpaymentId\n      billingModelId\n      subscriptionId\n      executionTimestamp\n      payee\n      payer\n      executionFee\n      userAmount\n      receiverAmount\n      subscription {\n        paymentToken\n      }\n      billingModel {\n        settlementToken\n      }\n    }\n  }\n` as DocumentNode | TypedDocumentNode<any, any>;\n\nconst RECURRING_DYNAMIC_PULLPAYMENTS_QUERY = gql`\n  query GetDetails(\n    $ppAddress: String!\n    $bmId: String!\n    $subscriptionId: String!\n    $count: Int!\n    $skipCount: Int!\n    $data: String\n    $direction: String\n  ) {\n    recurringDynamicPullPayments(\n      first: $count\n      skip: $skipCount\n      where: { pullPaymentAddress: $ppAddress, billingModelId: $bmId, subscriptionId: $subscriptionId }\n    ) {\n      id\n      pullPaymentAddress\n      pullpaymentId\n      billingModelId\n      subscriptionId\n      executionTimestamp\n      payee\n      payer\n      executionFee\n      userAmount\n      receiverAmount\n      subscription {\n        paymentToken\n        settlementToken\n      }\n    }\n  }\n` as DocumentNode | TypedDocumentNode<any, any>;\n\nconst SINGLE_PULLPAYMENTS_QUERY = gql`\n  query GetDetails(\n    $ppAddress: String!\n    $bmId: String!\n    $subscriptionId: String!\n    $count: Int!\n    $skipCount: Int!\n    $data: String\n    $direction: String\n  ) {\n    singleSubscriptions(\n      first: $count\n      skip: $skipCount\n      where: { pullPaymentAddress: $ppAddress, billingModelId: $bmId, subscriptionId: $subscriptionId }\n    ) {\n      id\n      pullPaymentAddress\n      billingModelId\n      subscriptionId\n      subscriptionTime\n      payee\n      payer\n      paymentToken\n      executionFee\n      userAmount\n      receiverAmount\n      billingModel {\n        settlementToken\n      }\n    }\n  }\n` as DocumentNode | TypedDocumentNode<any, any>;\n\nconst SINGLE_DYNAMIC_PULLPAYMENTS_QUERY = gql`\n  query GetDetails(\n    $ppAddress: String!\n    $bmId: String!\n    $subscriptionId: String!\n    $count: Int!\n    $skipCount: Int!\n    $data: String\n    $direction: String\n  ) {\n    singleDynamicSubscriptions(\n      first: $count\n      skip: $skipCount\n      where: { pullPaymentAddress: $ppAddress, billingModelId: $bmId, subscriptionId: $subscriptionId }\n    ) {\n      id\n      pullPaymentAddress\n      billingModelId\n      subscriptionId\n      subscriptionTime\n      payee\n      payer\n      paymentToken\n      settlementToken\n      executionFee\n      userAmount\n      receiverAmount\n    }\n  }\n` as DocumentNode | TypedDocumentNode<any, any>;\n\ninterface IQueryVars {\n  ppAddress: string;\n  bmId: string;\n  subscriptionId: string;\n  count: number;\n  skipCount: number;\n  data: string;\n  direction: string;\n}\n\ninterface ISubgraphResponse {\n  pullPayments?: IPullPaymentEntities[];\n  recurringDynamicPullPayments?: IPullPaymentEntities[];\n  singleDynamicSubscriptions?: IPullPaymentEntities[];\n  singleSubscriptions?: IPullPaymentEntities[];\n}\n\ninterface ISubscriptionEntity {\n  paymentToken: string;\n}\n\ninterface IBillingModelEntity {\n  settlementToken: string;\n}\n\ninterface IPullPaymentEntities {\n  id: string;\n  pullPaymentAddress: string;\n  pullpaymentId: string;\n  billingModelId: string;\n  subscriptionId: string;\n  executionTimestamp: string;\n  subscriptionTime?: string;\n  payee: string;\n  payer: string;\n  executionFee: string;\n  userAmount: string;\n  receiverAmount: string;\n  subscription: ISubscriptionEntity;\n  billingModel: IBillingModelEntity;\n}\n\nconst getQuery = _pullPaymentType => {\n  if (_pullPaymentType === BillingModelTypes.RecurringDynamic) {\n    return RECURRING_DYNAMIC_PULLPAYMENTS_QUERY;\n  } else if (\n    _pullPaymentType === BillingModelTypes.Recurring ||\n    _pullPaymentType === BillingModelTypes.RecurringFreeTrial ||\n    _pullPaymentType === BillingModelTypes.RecurringPaidTrial\n  ) {\n    return RECURRING_PULLPAYMENTS_QUERY;\n  } else if (_pullPaymentType === BillingModelTypes.Single) {\n    return SINGLE_PULLPAYMENTS_QUERY;\n  } else if (_pullPaymentType === BillingModelTypes.SingleDynamic) {\n    return SINGLE_DYNAMIC_PULLPAYMENTS_QUERY;\n  }\n};\n\nconst PullPaymentsData = (\n  _chainId: ChainId,\n  _pullPaymentType: BillingModelTypes,\n  _billingModelId: string,\n  _subscriptionId: string,\n  _count: number,\n  _skipCount: number,\n  _orderData: string,\n  _direction: string,\n): ISubgraphResponse | null => {\n  const query = getQuery(_pullPaymentType);\n\n  const { loading, error, data } = useQuery<ISubgraphResponse | any, IQueryVars>(query, {\n    variables: {\n      ppAddress: GET_BM_TYPE_CONTRACT_ADDRESS(_chainId, _pullPaymentType),\n      bmId: _billingModelId,\n      subscriptionId: _subscriptionId,\n      count: _count,\n      skipCount: _skipCount,\n      data: _orderData,\n      direction: _direction,\n    },\n    fetchPolicy: 'network-only', // Used for first execution\n    // nextFetchPolicy:\"cache-first\", // Used for subsequent executions\n    pollInterval: 30000,\n  });\n\n  if (loading) return null;\n  if (error) {\n    console.log(`Error! ${error}`);\n    throw new Error(`Error! ${error}`);\n  }\n\n  return data;\n};\n\nconst useGetPullPayments = (\n  billingModelType: BillingModelTypes,\n  billingModelId: string,\n  subscriptionId: string,\n  count = 1000,\n  skipCount = 0,\n  orderData = 'date',\n  direction = 'desc',\n):\n  | {\n      [txHash: string]: IPullPaymentDetails;\n    }\n  | null\n  | {} => {\n  const { chainId } = useActiveWeb3React();\n\n  if (!chainId || !billingModelType || !billingModelId || !subscriptionId) return;\n\n  const data = PullPaymentsData(\n    chainId,\n    billingModelType,\n    billingModelId,\n    subscriptionId,\n    count,\n    skipCount,\n    orderData,\n    direction,\n  );\n\n  const res =\n    data?.pullPayments ||\n    data?.recurringDynamicPullPayments ||\n    data?.singleDynamicSubscriptions ||\n    data?.singleSubscriptions;\n\n  const pps = res?.map(pp => {\n    return {\n      pullPaymentId:\n        billingModelType === BillingModelTypes.Single || billingModelType === BillingModelTypes.SingleDynamic\n          ? pp.subscriptionId\n          : pp.pullpaymentId,\n      transactionHash: pp.id.split('_')[3],\n      executionTimestamp:\n        billingModelType === BillingModelTypes.Single || billingModelType === BillingModelTypes.SingleDynamic\n          ? pp.subscriptionTime\n          : pp.executionTimestamp,\n      executionFee: pp.executionFee,\n      amountReceived: pp.receiverAmount,\n      amountPaid: pp.userAmount,\n    };\n  });\n  return pps;\n};\n\nexport default useGetPullPayments;\n","import styled from 'styled-components';\nimport Loader from '../Loader';\nimport { useSupportedTokens } from '../../state/supported-tokens/hooks';\nimport moment from 'moment';\nimport { getEtherscanLink, formatUnits, shortenTxHash } from '../../utils';\nimport { ExternalLink } from '../../theme';\nimport React from 'react';\nimport { useActiveWeb3React } from '../../hooks';\nimport useGetPullPayments from '../../hooks/useGetPullpayments';\n\nconst TableTopWrap = styled.div`\n  display: flex;\n  align-items: center;\n  h3 {\n    font-weight: 400;\n    width: 30%;\n  }\n  .new-billing-model {\n    font-size: 14px;\n    button {\n      padding: 0px;\n      border-radius: 50%;\n      width: 35px;\n      height: 35px;\n      border: 0;\n      background: #7023ff;\n      color: #fff;\n      font-size: 26px;\n      line-height: 35px;\n      margin-left: 10px;\n      cursor: pointer;\n      :hover {\n        background: #9e70f5;\n      }\n    }\n  }\n`;\nconst StyledTable = styled.table`\n  .empty-table-row {\n    text-align: center;\n    font-size: 1rem;\n    line-height: 2rem;\n  }\n  margin-bottom: 100px;\n  border-collapse: collapse;\n  border-spacing: none;\n  width: 100%;\n  border: 1px solid #ddd;\n  caption-side: bottom;\n  empty-cell: show | hide;\n  empty-cell is a property of table or the cells themselves\n\n\tvertical-align: baseline | sub | super | text-top |\n\ttext-bottom | middle | top | bottom |\n\t<percentage> | <length>\n\n   tbody {\n    vertical-align: top;\n  }\n  td,\n  th {\n    border: 1px solid #ccc;\n  }\n  thead tr th:nth-child(3) {\n    width: 20%;\n  }\n\n  thead tr th:nth-child(7) {\n    width: 10%;\n  }\n  td:nth-child(3) {\n    color: #7023ff;\n  }\n  td {\n    padding: 10px 10px;\n    font-size: 12px;\n    border: 1px solid #eae8ee;\n    color: #756f82;\n    :first-child {\n      border-left: none;\n    }\n    :last-child {\n      border-right: none;\n    }\n  }\n  th {\n    padding: 10px 10px;\n    font-size: 12px;\n    border: 1px solid #eae8ee;\n    text-align: left;\n    font-weight: normal;\n    :first-child {\n      border-left: none;\n    }\n    :last-child {\n      border-right: none;\n    }\n  }\n  tbody {\n    position: relative;\n  }\n\n  tbody tr {\n    background-color: #fff;\n    :hover {\n      background-color: #f7f6f9;\n    }\n  }\n  thead > tr {\n    background-color: #f7f6f9;\n  }\n  small {\n    padding: 7px;\n    border-radius: 7px;\n  }\n  small.SUCCESS {\n    color: #00996d;\n    background: #e5fff8;\n  }\n  small.PENDING {\n    color: #b28824;\n    background: #fff7e5;\n  }\n  small.REJECTED {\n    color: #ff647c;\n    background: #ffe5e9;\n  }\n  tbody > span {\n    position: absolute;\n    left: 48%;\n    top: 22px;\n  }\n  .loader-main {\n    position: absolute;\n    margin: 1rem auto;\n    left: 50%;\n  }\n`;\n\nconst TABLE_TITLES = [\n  'No.',\n  'Date',\n  'Transaction ID',\n  // \"Currency\",\n  // \"Settlement Currency\",\n  // \"Rate\",\n  'Amount Paid',\n  'Execution Fee',\n  'Amount Received',\n  'Status',\n  // \"Refund\",\n];\n\nconst BMSubscriptionPaymentsTable = ({ pullPaymentType, billingModelId, subscriptionId, bmSubscription }) => {\n  // console.log(\"pullPaymentTxs\", pullPaymentTxs);\n  const supportedTokens = useSupportedTokens();\n\n  const ppTxs = useGetPullPayments(pullPaymentType, billingModelId, subscriptionId);\n\n  // console.log(\"pptx: \", ppTxs);\n\n  return (\n    <TableMarkup\n      pullPaymentTxs={ppTxs}\n      sellingToken={supportedTokens[bmSubscription?.settlementToken]}\n      paymentToken={supportedTokens[bmSubscription?.paymentToken]}\n    />\n  );\n};\n\nconst TableMarkup = ({ pullPaymentTxs, sellingToken, paymentToken }) => {\n  const { chainId } = useActiveWeb3React();\n  return (\n    <>\n      <div>\n        <TableTopWrap className=\"table-top\">\n          <h3>Payments</h3>\n        </TableTopWrap>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>\n                <input type=\"checkbox\" value=\"select\" />\n              </th>\n              {TABLE_TITLES.map((title, index) => (\n                <th key={index}>{title}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {pullPaymentTxs === undefined || pullPaymentTxs === null ? (\n              <tr>\n                <td colSpan={12}>\n                  <div>\n                    <Loader className=\"loader-main\" size={'3rem'} />\n                  </div>\n                </td>\n              </tr>\n            ) : Object.keys(pullPaymentTxs).length > 0 ? (\n              Object.keys(pullPaymentTxs)?.map((key, index) => (\n                <tr key={pullPaymentTxs[key]?.transactionHash}>\n                  <td>\n                    {' '}\n                    <input type=\"checkbox\" value=\"select\" />{' '}\n                  </td>\n                  <td>\n                    <span className=\"model-target\">{pullPaymentTxs[key]?.pullPaymentId}</span>\n                  </td>\n                  <td>{moment(pullPaymentTxs[key].executionTimestamp * 1000).format('lll')}</td>\n                  <td>\n                    <ExternalLink\n                      href={getEtherscanLink(chainId, pullPaymentTxs[key]?.transactionHash, 'transaction')}\n                      style={{ fontSize: '14px' }}\n                    >\n                      {shortenTxHash(pullPaymentTxs[key]?.transactionHash)}\n                    </ExternalLink>\n                  </td>\n                  {/*<td>{\"TOKEN\"}</td>*/}\n                  {/* <td>{row[\"Settlement Currency\"]}</td> */}\n                  {/* <td>{row[\"Rate\"]}</td> */}\n                  <td>\n                    ~\n                    {formatUnits(\n                      pullPaymentTxs[key]?.amountPaid === 'undefined' ? 0 : pullPaymentTxs[key]?.amountPaid,\n                      paymentToken?.decimals,\n                    )}\n                    &nbsp; {paymentToken?.symbol}\n                  </td>\n                  <td>\n                    ~\n                    {formatUnits(\n                      pullPaymentTxs[key]?.executionFee === 'undefined' ? 0 : pullPaymentTxs[key]?.executionFee,\n                      paymentToken?.decimals,\n                    )}\n                    &nbsp;{paymentToken?.symbol}\n                  </td>\n                  <td>\n                    ~\n                    {formatUnits(\n                      pullPaymentTxs[key]?.amountReceived === 'undefined' ? 0 : pullPaymentTxs[key]?.amountReceived,\n                      sellingToken?.decimals,\n                    )}\n                    &nbsp;{sellingToken?.symbol}\n                  </td>\n                  <td>\n                    <small className={'SUCCESS'}>SUCCESS</small>\n                  </td>\n                  {/* <td>{row[\"Refund\"]}</td> */}\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan={12}>\n                  <div className=\"empty-table-row\">\n                    <span>No payments</span>\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </StyledTable>\n      </div>\n    </>\n  );\n};\n\nexport default BMSubscriptionPaymentsTable;\n","import { ChainId } from '..';\n\nexport const PULLPAYMENT_SUBGRAPH_URL: { [chainId in ChainId]: string } = {\n  137: '',\n  80001: 'https://api.thegraph.com/subgraphs/name/ashitosh03/dev-pullpayments',\n};\n","import { from, HttpLink, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { PULLPAYMENT_SUBGRAPH_URL } from '../constants/subgraphs';\nimport { useActiveWeb3React } from '../hooks';\n\nexport const errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message }) => {\n      console.log('Graphql error:', message);\n    });\n  }\n});\n\nexport const GetApolloProvider = () => {\n  const { chainId } = useActiveWeb3React();\n\n  const subgraphLink = from([errorLink, new HttpLink({ uri: chainId && PULLPAYMENT_SUBGRAPH_URL[chainId] })]);\n\n  const apolloClient = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: subgraphLink,\n  });\n\n  return apolloClient;\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { AutoColumn } from '../../components/Column';\nimport styled from 'styled-components';\nimport SubscriptionInfoCard from '../../components/SubscriptionInfoCard';\nimport ArrowRight from '../../assets/images/back-arrow.svg';\nimport { NavToggle } from '../App';\nimport { Link, useLocation } from 'react-router-dom';\nimport { BillingModelTypes, isDynamicBM } from '../../utils';\nimport BillingInfoCard from '../../components/BillingInfoCard';\nimport { useBillingModel, useBMSubscription } from '../../state/my-billing-models/hooks';\nimport BMSubscriptionPaymentsTable from '../../components/TransactionDashboardDetails';\nimport {\n  useDynamicRecurringPPContract,\n  useFreeTrialRecurringPPContract,\n  usePaidTrialRecurringPPContract,\n  useRecurringPPContract,\n  useSingleDynamicPPContract,\n  useSinglePPContract,\n} from '../../hooks/useContract';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../../state';\nimport { ButtonLight, ButtonPrimary } from '../../components/Button';\nimport CancelSubscriptionModal from '../../components/CancelSubscriptionModal';\nimport { ApolloProvider } from '@apollo/client';\nimport { GetApolloProvider } from '../../utils/getApolloProvider';\n\nconst MainContent = styled.div`\n  color: #000;\n  &.open {\n    padding-left: 220px;\n    padding-right: 2rem;\n  }\n  .table-top {\n    margin-top: 30px;\n  }\n  .subscription-wrapper {\n    .btn-wrap .align-btn {\n      display: flex;\n      align-items: center;\n\n      button.btn-theme-outlined {\n        background: #fff;\n        border: 1px solid #b2acbf;\n        padding: 9px 25px;\n        border-radius: 6px;\n        font-size: 12px;\n        min-width: 97px;\n      }\n    }\n\n    .btn-wrap {\n      margin-top: 20px;\n      .align-btn button {\n        margin-right: 5px;\n      }\n    }\n\n    h3,\n    h4,\n    h5 {\n      font-weight: 500;\n    }\n    .bg-back {\n      background: #f8f5ff;\n      padding: 10px 20px;\n    }\n\n    .bg-back .details-wrapper {\n      display: flex;\n    }\n\n    .bg-back .details-wrapper .items {\n      width: 160px;\n    }\n\n    .bg-back .details-wrapper .items p {\n      margin-bottom: 0;\n      font-size: 12px;\n      color: #444;\n    }\n\n    .bg-back .details-wrapper .items h5,\n    .bg-back .details-wrapper .items h3 {\n      margin-top: 5px;\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 20px;\n    select {\n      border: none;\n    }\n    .navigation {\n      display: flex;\n      p {\n        background: #ededed;\n        border-radius: 5px;\n        padding: 8px 14px;\n        margin: 0 5px;\n      }\n    }\n  }\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  padding-left: 100px;\n\n  .top-wrap {\n    margin-top: 20px;\n    display: flex;\n    justify-content: space-between;\n    > div:first-child {\n      width: 35%;\n    }\n  }\n`;\nconst StyledLink = styled.a`\n  &:hover {\n    .sidebar-text {\n      color: #7023FF;\n    }\n    .default {\n      display: none;\n    }\n    .focus {\n      display: inline;\n    }\n  }\n  display: flex;\n  font-size: 13px;\n  margin: auto 0;\n  text-decoration: none;\n  .focus {\n    display: none;\n  }\n  img {\n    margin-right: 10px;\n  }\n}`;\n\nfunction TransactionDashboard() {\n  const selectNavToggle = useContext(NavToggle);\n  const { chainId } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const location = useLocation();\n  const query = new URLSearchParams(location?.search);\n\n  const billingModelType = query.get('billing-model-type');\n  const billingModelId = query.get('billing-model-id');\n  const bmSubscriptionId = query.get('subscription-id');\n\n  const billingModelDetails = useBillingModel(BillingModelTypes[billingModelType], billingModelId);\n  const bmSubscription = useBMSubscription(BillingModelTypes[billingModelType], billingModelId, bmSubscriptionId);\n  const isCancelDisabled = Number(bmSubscription?.cancelTimestamp) > 0;\n  const isCancelVisible = Number(bmSubscription?.numberOfPayments) !== 0;\n  const client = GetApolloProvider();\n\n  const singlePPContract = useSinglePPContract();\n  const singleDynamicPPContract = useSingleDynamicPPContract();\n  const recurringPPContract = useRecurringPPContract();\n  const dynamicRecurringPPContract = useDynamicRecurringPPContract();\n  const freeTrialRecurringPPContract = useFreeTrialRecurringPPContract();\n  const paidTrialRecurringPPContract = usePaidTrialRecurringPPContract();\n\n  let contract;\n  switch (String(BillingModelTypes[billingModelType])) {\n    case String(BillingModelTypes.Single): {\n      contract = singlePPContract;\n      break;\n    }\n    case String(BillingModelTypes.SingleDynamic): {\n      contract = singleDynamicPPContract;\n      break;\n    }\n    case String(BillingModelTypes.Recurring): {\n      contract = recurringPPContract;\n      break;\n    }\n    case String(BillingModelTypes.RecurringDynamic): {\n      contract = dynamicRecurringPPContract;\n      break;\n    }\n    case String(BillingModelTypes.RecurringFreeTrial): {\n      contract = freeTrialRecurringPPContract;\n      break;\n    }\n    case String(BillingModelTypes.RecurringPaidTrial): {\n      contract = paidTrialRecurringPPContract;\n      break;\n    }\n    default: {\n      console.warn(`Unsupported Billing Model Type - ${billingModelType}`);\n      break;\n    }\n  }\n\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [cancelSubscriptionId, setCancelSubscriptionId] = useState(null);\n  const [cancelSubscriptionBillingModelType, setCancelSubscriptionBillingModelType] = useState(null);\n  const [isCancelBtnLoading, setIsCancelBtnLoading] = useState(false);\n\n  const cancelSubscriptionHandler = (bmSubscriptionId, bmType) => {\n    setCancelSubscriptionId(bmSubscriptionId);\n    setCancelSubscriptionBillingModelType(bmType);\n    setShowCancelModal(true);\n  };\n\n  return (\n    <>\n      <MainContent className={selectNavToggle ? 'SubscriptionModel open' : 'SubscriptionModel'}>\n        <div className=\"top-wrap\">\n          <AutoColumn gap=\"lg\" justify=\"flex-start\">\n            <StyledLink\n              style={{ color: '#756F82', marginBottom: '1rem' }}\n              as={Link}\n              to={`/merchant/billing-model-details?billing-model-type=${billingModelType}&billing-model-id=${billingModelId}`}\n            >\n              {' '}\n              <img src={ArrowRight} alt=\"arrow\" /> Back to Customers\n            </StyledLink>\n          </AutoColumn>\n          {!isDynamicBM(BillingModelTypes[billingModelType]) && (\n            <BillingInfoCard billingModelDetails={billingModelDetails} />\n          )}\n        </div>\n        <SubscriptionInfoCard\n          bmSubscription={bmSubscription}\n          billingModel={billingModelDetails}\n          billingModelType={billingModelType}\n        />\n\n        {isCancelVisible &&\n          BillingModelTypes[billingModelType] !== BillingModelTypes.Single &&\n          BillingModelTypes[billingModelType] !== BillingModelTypes.SingleDynamic && (\n            <AutoColumn gap=\"lg\" justify=\"flex-start\" style={{ marginTop: '1rem' }}>\n              <div style={{ width: '10%' }}>\n                <ButtonLight\n                  disabled={isCancelDisabled}\n                  onClick={() => {\n                    cancelSubscriptionHandler(bmSubscription.id, billingModelType);\n                  }}\n                >\n                  {isCancelDisabled ? 'CANCELLED' : 'CANCEL'}\n                </ButtonLight>\n              </div>\n            </AutoColumn>\n          )}\n\n        <ApolloProvider client={client}>\n          <BMSubscriptionPaymentsTable\n            pullPaymentType={BillingModelTypes[billingModelType]}\n            billingModelId={billingModelId}\n            subscriptionId={bmSubscriptionId}\n            bmSubscription={bmSubscription}\n          />\n        </ApolloProvider>\n        <CancelSubscriptionModal\n          cancelSubscriptionId={cancelSubscriptionId}\n          billingModelType={cancelSubscriptionBillingModelType}\n          showCancelModal={showCancelModal}\n          setShowCancelModal={setShowCancelModal}\n          isLoading={isCancelBtnLoading}\n          setIsLoading={setIsCancelBtnLoading}\n        />\n      </MainContent>\n    </>\n  );\n}\n\nexport default TransactionDashboard;\n"],"sourceRoot":""}
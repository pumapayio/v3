{"version":3,"sources":["state/supported-tokens/hooks.tsx","components/SupportedLifeCyle/index.tsx","components/ProgressBar/index.tsx","components/MerchantWidget/ConfigContent.tsx","components/MerchantWidget/index.tsx","pages/CreateWidget/index.tsx"],"names":["useSupportedTokens","chainId","useActiveWeb3React","state","useSelector","supported_tokens","UNIT_MEASURES","y","mo","w","d","h","m","s","DEFAULT_PERIOD_VALUE","label","periodInSeconds","supportedLifecycles","env","statusOptionsValuesForMerchantDashboard","BillingModelTypeTitles","BillingModelTypes","Recurring","RecurringFreeTrial","RecurringPaidTrial","RecurringDynamic","Single","SingleDynamic","id","value","ProgressBarContainer","styled","div","ProgressBarChildContainer","ProgressBar","props","name","urlName","window","location","href","split","pop","className","checkUrlName","htmlFor","ConfigContent","billingModelId","billingModelType","billingModelDetails","widgetData","supportedTokens","useState","trialType","setTrialType","useEffect","isRecurringDynamic","currencyOptions","Object","keys","length","map","index","address","symbol","onPeriodChange","e","duration","find","cycle","Number","target","bmTrialDuration","setter","bmDurationPeriod","frequencyOptions","freq","trialPeriodDuration","type","bmTrialPeriod","min","onChange","placeholder","defaultValue","bmName","bmPrice","style","width","borderRadius","background","bmCurrency","bmNoOfPayments","bmFrequency","BMTrialTypes","NoTrial","PaidTrial","bmInitialAmount","WidgetContent","MerchantWidgetContainer","isPreview","t","useTranslation","copyWidgetUrl","setCopyWidgetUrl","codeSnippet","setCodeSnippet","widget_billing_name","setWidgetBillingName","widget_billing_price","setWidgetBillingPrice","widget_number_of_payment","setWidgetNumberOfPayment","widget_trial_period","setWidgetTrialPeriod","widget_frequency","setWidgetFrequency","widget_initial_amount","setWidgetInitialAmount","decimals","widget_token_currency","setWidgetTokenCurrency","durationPeriod","setDurationPeriod","trailPeriodDuration","setTrailPeriodDuration","widget_merchantName","setMerchantName","widget_merchantUrl","setMerchantUrl","merchantName","merchantUrl","BillingModelTypeForCodeSnippet","template","String","console","error","Tabs","defaultActiveKey","Tab","eventKey","title","isDynamicBM","rel","amount","token","isAnySingleBM","humanizeDuration","largest","round","unitMeasures","frequency","moment","now","format","numberOfPayments","isRecurringWithTrial","FreeTrial","fromTokenDecimals","initialAmount","toString","trialPeriod","tabClassName","disabled","textAlign","Button","onClick","navigator","clipboard","writeText","then","setTimeout","err","MainContent","BtnWrapper","MarginLeft","CreateWidget","account","useLocation","history","useHistory","dispatch","useDispatch","selectNavToggle","useContext","NavToggle","loading","setLoading","isEdit","setIsEdit","reference","setReference","billingCreateType","setBillingCreateType","updateBilling","setUpdateBilling","setBillingModelId","billingName","setBillingName","billingAmount","setBillingAmount","billingCurrency","setBillingCurrency","setIsDynamicBM","numberOfTrialPeriods","setNumberOfTrialPeriods","setBmFrequency","bmFrequencyInSeconds","setBmFrequencyInSeconds","setNumberOfPayments","noOfDurationPeriods","setNoOfDurationPeriod","bmFrequencyPeriod","setbmFrequencyPeriod","setPaymentFrequency","setTrialPeriod","setInitialAmount","Math","floor","log","singleBContract","useSinglePPContract","singleDynamicBContract","useSingleDynamicPPContract","recurringPPContract","useRecurringPPContract","recurringDynamicContract","useDynamicRecurringPPContract","freeTrialContract","useFreeTrialRecurringPPContract","paidTrialContract","usePaidTrialRecurringPPContract","useToken","navigateToBMDetailsPage","bmType","txReceipt","push","args","handleSuccessfulBlockchainTx","response","paymentAmount","a","isUpdate","summary","hash","bmCreation","tokenAddress","uniqueReference","addTransaction","from","wait","WAIT_BLOCK_CONFIRMATIONS","handleFailedBMCreation","debug","message","onCreateSingleAndDynamicBilling","alert","handleSingleDynamicBMCreation","handleSingleBMCreation","contract","estimateGas","createBillingModel","catch","estimatedGas","gasLimit","calculateGasMargin15","handleDynamicRecurringBMCreation","calculateGasMargin","handleRecurringBMCreation","handleRecurringFreeTrialBMCreation","handleRecurringPaidTrialBMCreation","onCreateRecurringAndDynamicBilling","onUpdateSingleBilling","editBillingModel","onUpdateRecurringBilling","src","ArrowRight","alt","pathname","isDynamic","gap","justify","info","as","onSubmit","preventDefault","r","handleBMCreation","zIndex","borderColor","marginRight","color","display","padding","Link","to"],"mappings":"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","file":"static/js/5.727f6f9d.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { AppState } from '../index';\nimport { SupportedTokenDetails } from './reducer';\n\nexport function useSupportedTokens(): {\n  [tokenAddress: string]: SupportedTokenDetails;\n} {\n  const { chainId } = useActiveWeb3React();\n  const state = useSelector<AppState, AppState['supported_tokens']>(state => state.supported_tokens);\n  return chainId ? state[chainId] ?? {} : {};\n}\n","import { BillingModelTypes, BillingModelTypeTitles } from '../../utils';\n\nexport const UNIT_MEASURES = {\n  y: 31536000,\n  mo: 2592000,\n  w: 604800,\n  d: 86400,\n  h: 3600,\n  m: 60,\n  s: 1,\n};\n\nexport const DEFAULT_PERIOD_VALUE = {\n  label: 'Day(s)',\n  periodInSeconds: 86400,\n};\n\nexport const supportedLifecycles = [\n  {\n    label: 'Minute(s)',\n    periodInSeconds: 60,\n    env: 'TEST',\n  },\n  {\n    label: 'Hour(s)',\n    periodInSeconds: 3600, // an hour has 60m => 60 * 60\n    env: 'TEST',\n  },\n  {\n    label: 'Day(s)',\n    periodInSeconds: 86400, // an day has 24h => 3600 * 24\n    env: 'TEST,PROD',\n  },\n  {\n    label: 'Week(s)',\n    periodInSeconds: 604800, // a week has 7d => 86400 * 7\n    env: 'TEST,PROD',\n  },\n  {\n    label: 'Month(s)',\n    periodInSeconds: 2592000,\n    env: 'TEST,PROD',\n  },\n  {\n    label: 'Quarter(s)',\n    periodInSeconds: 7776000,\n    env: 'TEST,PROD',\n  },\n  {\n    label: 'Year(s)',\n    periodInSeconds: 31536000,\n    env: 'TEST,PROD',\n  },\n];\n\nexport const billingModelTypeOptionsValues = [\n  { id: 0, value: BillingModelTypeTitles['All'] },\n  { id: 1, value: BillingModelTypeTitles[BillingModelTypes.Recurring] },\n  {\n    id: 2,\n    value: BillingModelTypeTitles[BillingModelTypes.RecurringFreeTrial],\n  },\n  {\n    id: 3,\n    value: BillingModelTypeTitles[BillingModelTypes.RecurringPaidTrial],\n  },\n  { id: 4, value: BillingModelTypeTitles[BillingModelTypes.RecurringDynamic] },\n  { id: 5, value: BillingModelTypeTitles[BillingModelTypes.Single] },\n  { id: 6, value: BillingModelTypeTitles[BillingModelTypes.SingleDynamic] },\n];\n\nexport const statusOptionsValuesForMerchantDashboard = [\n  { id: 0, value: 'Status: All' },\n  { id: 1, value: 'ACTIVE' },\n  { id: 2, value: 'INACTIVE' },\n  { id: 3, value: 'SUSPENDED' },\n];\nexport const statusOptionsForSubscriptionDashboard = [\n  { id: 0, value: 'Status: All' },\n  { id: 1, value: 'ACTIVE' },\n  { id: 2, value: 'CANCELLED' },\n];\n","import styled from 'styled-components';\n\nconst ProgressBarContainer = styled.div`\n  padding-left: 30px;\n  width: 190px;\n  border-right: 1px solid #ddd;\n  padding-right: 10px;\n  margin-right: 20px;\n\n  .progress-item {\n    padding: 15px 0;\n    position: relative;\n    &:not(:last-child):before {\n      content: '';\n      position: absolute;\n      height: 100%;\n      border: 1px solid #ddd;\n      top: 30px;\n      left: -20px;\n    }\n    span {\n      align-items: center;\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      position: absolute;\n      left: -29px;\n      display: flex;\n      justify-content: center;\n    }\n    span.pending {\n      background: #fff;\n      border: 1px solid #a3a3a3;\n    }\n    span.completed {\n      background: #00d48b;\n      &:before {\n        content: '';\n        display: inline-block;\n        width: 7px;\n        height: 4px;\n        border-left: 2px solid #fff;\n        border-bottom: 2px solid #fff;\n        transform: rotate(312deg);\n      }\n    }\n    span.current {\n      background: #00d48b;\n      &:before {\n        content: '';\n        display: inline-block;\n        width: 8px;\n        height: 8px;\n        border-radius: 50%;\n        background: #fff;\n        transform: rotate(312deg);\n      }\n    }\n  }\n  label {\n    font-size: 16px;\n  }\n  p {\n    color: #756f82;\n    font-size: 12px;\n    margin-top: 5px;\n  }\n`;\nconst ProgressBarChildContainer = styled.div``;\nexport default function ProgressBar(props?: any) {\n  const urlName = window.location.href.split('/').pop();\n  return (\n    <ProgressBarContainer className=\"progressBar\">\n      <ProgressBarChildContainer className=\"progress-item\">\n        <span className={checkUrlName(urlName) ? 'current' : 'completed'}></span>\n        <label htmlFor=\"\">Billing Model</label>\n        <p>Choose a billing model</p>\n      </ProgressBarChildContainer>\n      <ProgressBarChildContainer className=\"progress-item\">\n        <span className={checkUrlName(urlName) ? 'pending' : 'current'}></span>\n        <label htmlFor=\"\">Setup</label>\n        <p>Set price and currency</p>\n      </ProgressBarChildContainer>\n      <ProgressBarChildContainer className=\"progress-item\">\n        <span className={checkIntegrationUrlName(urlName) ? 'pending' : 'current'}></span>\n        <label htmlFor=\"\">Integration</label>\n        <p>Embed code snippet</p>\n      </ProgressBarChildContainer>\n    </ProgressBarContainer>\n  );\n}\n\nfunction checkUrlName(name: string) {\n  return name === 'create/choose-billing-model-type' ? true : false;\n}\n\nfunction checkIntegrationUrlName(name: string) {\n  return name === 'create/widget-preview' ? false : true;\n}\n","import { Input, Select } from '@rebass/forms';\nimport { useEffect, useState } from 'react';\nimport { useSupportedTokens } from '../../state/supported-tokens/hooks';\nimport { BillingModelTypes, BMTrialTypes } from '../../utils';\nimport { supportedLifecycles } from '../SupportedLifeCyle';\n\nconst ConfigContent = ({ billingModelId, billingModelType, billingModelDetails, widgetData }) => {\n  const supportedTokens = useSupportedTokens();\n\n  const [trialType, setTrialType] = useState(billingModelDetails?.trialType ? billingModelDetails?.trialType : 0);\n\n  useEffect(() => {\n    setTrialType(billingModelDetails?.trialType);\n  }, [billingModelDetails?.trialType]);\n\n  const isRecurringDynamic = BillingModelTypes[billingModelType] === BillingModelTypes.RecurringDynamic;\n\n  const currencyOptions =\n    Object.keys(supportedTokens).length > 0 &&\n    Object.keys(supportedTokens)?.map(function (index) {\n      return (\n        <option key={supportedTokens[index].address} value={supportedTokens[index].address}>\n          {supportedTokens[index].symbol}\n        </option>\n      );\n    });\n\n  const onBmNameChange = e => {\n    widgetData.bmName.setter(e.target.value);\n  };\n  const onBmPriceChange = e => {\n    widgetData.bmPrice.setter(e.target.value);\n  };\n  const onCurrencyChanged = e => {\n    widgetData.bmCurrency.setter(supportedTokens[e.target.value]);\n  };\n  const onNoOfPaymentsChange = e => {\n    widgetData.bmNoOfPayments.setter(e.target.value);\n  };\n  const onPeriodChange = e => {\n    const duration = supportedLifecycles.find(cycle => Number(cycle.periodInSeconds) === Number(e.target.value));\n    if (e.target.id === 'bm-trial-period-frequency') {\n      widgetData.bmTrialDuration.setter(duration);\n    } else {\n      widgetData.bmDurationPeriod.setter(duration);\n    }\n  };\n\n  const onFrequencyChange = e => {\n    widgetData.bmFrequency.setter(e.target.value);\n  };\n\n  const onTrailPeriodChange = e => {\n    widgetData.bmTrialPeriod.setter(e.target.value);\n  };\n\n  const onInitialAmountChanged = e => {\n    widgetData.bmInitialAmount.setter(e.target.value);\n  };\n\n  const frequencyOptions = supportedLifecycles.map(freq => (\n    <option key={freq.periodInSeconds} value={freq.periodInSeconds}>\n      {freq.label}\n    </option>\n  ));\n\n  const trialPeriodDuration = (\n    <>\n      <span className=\"attribute\">Trial Duration</span>\n\n      <div className=\"trial-period-frequency\">\n        <Input\n          id=\"bm-trial-period\"\n          name=\"bm-trial-period\"\n          type=\"number\"\n          value={widgetData.bmTrialPeriod.value}\n          min=\"1\"\n          onChange={onTrailPeriodChange}\n          placeholder=\"enter trial period\"\n        />\n        <Select\n          id=\"bm-trial-period-frequency\"\n          name=\"bm-trial-period-frequency\"\n          defaultValue={widgetData.bmTrialDuration.value.periodInSeconds}\n          onChange={onPeriodChange}\n        >\n          {frequencyOptions}\n        </Select>\n      </div>\n    </>\n  );\n\n  return (\n    <div className=\"code-wrap\">\n      <div className=\"body\">\n        <span className=\"attribute\">BillingModelName</span>\n        <Input\n          id=\"bm-reference-name\"\n          name=\"bm-reference-name\"\n          type=\"text\"\n          value={widgetData.bmName.value}\n          onChange={onBmNameChange}\n          placeholder=\"enter billing name\"\n        />\n        <span className=\"attribute\">SellingPrice</span>\n        <Input\n          id=\"bm-selling-price\"\n          name=\"bm-selling-price\"\n          type=\"text\"\n          value={widgetData.bmPrice.value}\n          onChange={onBmPriceChange}\n          placeholder=\"enter selling price\"\n        />\n        <span className=\"attribute\">SellingToken</span>\n        <Select\n          id=\"bm-currency\"\n          name=\"bm-currency\"\n          style={{\n            width: '100px',\n            borderRadius: '4px 0 0 4px',\n            background: 'black',\n          }}\n          defaultValue={widgetData.bmCurrency.value?.address}\n          onChange={onCurrencyChanged}\n        >\n          {currencyOptions}\n        </Select>\n\n        {isRecurringDynamic && (\n          <>\n            <span className=\"attribute\">Number of payment</span>\n            <Input\n              id=\"bm-no-of-payments\"\n              name=\"bm-no-of-payments\"\n              type=\"number\"\n              min=\"1\"\n              value={widgetData.bmNoOfPayments.value}\n              onChange={onNoOfPaymentsChange}\n              placeholder=\"enter number of payment\"\n            />\n\n            <span className=\"attribute\">Frequency</span>\n            <div className=\"frequency\">\n              <Input\n                id=\"bm-frequency\"\n                name=\"bm-frequency\"\n                type=\"number\"\n                value={widgetData.bmFrequency.value}\n                min=\"1\"\n                onChange={onFrequencyChange}\n                placeholder=\"enter frequency\"\n              />\n              <Select\n                id=\"bm-frequency-period\"\n                name=\"bm-frequency-period\"\n                defaultValue={widgetData.bmDurationPeriod.value.periodInSeconds}\n                onChange={onPeriodChange}\n              >\n                {frequencyOptions}\n              </Select>\n            </div>\n            <div className=\"trialPeriod\">\n              {trialType === BMTrialTypes.NoTrial ? '' : trialPeriodDuration}\n              {trialType === BMTrialTypes.PaidTrial ? (\n                <div>\n                  <span className=\"attribute\">Trial Amount</span>\n                  <Input\n                    id=\"bm-trial-amount\"\n                    name=\"bm-trial-amount\"\n                    type=\"number\"\n                    value={widgetData.bmInitialAmount.value}\n                    min=\"1\"\n                    onChange={onInitialAmountChanged}\n                    placeholder=\"enter paid trail amount\"\n                  />\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ConfigContent;\n","import { Tab, Tabs } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport {\n  BillingModelTypes,\n  BMTrialTypes,\n  fromTokenDecimals,\n  isAnySingleBM,\n  isDynamicBM,\n  isRecurringWithTrial,\n} from '../../utils';\nimport { useEffect, useState } from 'react';\nimport { ButtonPrimary } from '../Button';\nimport { useTranslation } from 'react-i18next';\nimport { useSupportedTokens } from '../../state/supported-tokens/hooks';\nimport ConfigContent from './ConfigContent';\nimport humanizeDuration from 'humanize-duration';\nimport { DEFAULT_PERIOD_VALUE, UNIT_MEASURES } from '../SupportedLifeCyle';\nimport moment from 'moment';\n\nconst IS_CONFIG_FEAT_ENABLED = true;\n\nconst WidgetContent = styled.div`\n   {\n    .nav-link {\n      color: #5c5c5c;\n      pointer-events: all !important;\n    }\n    .tab-content > div {\n      width: 75%;\n    }\n    .code-copy {\n      float: left;\n      #CopyButtonPrimary {\n        border-color: #7023ff;\n        margin-right: 10px;\n        background: #7023ff;\n        color: #fff;\n        width: 120px;\n        display: inline-block;\n        padding: 8px;\n        border-radius: 10px;\n      }\n    }\n    .notice-box {\n      box-shadow: 2px 5px 10px 2px #4a435926;\n      border-radius: 15px;\n      padding: 30px 30px 80px;\n      text-align: center;\n      margin-bottom: 20px;\n      &.Single,\n      &.SingleDynamic {\n        height: 270px;\n      }\n      &.Recurring {\n        height: 340px;\n      }\n      &.RecurringFreeTrial,\n      &.RecurringPaidTrial {\n        height: 360px;\n      }\n      .connect-btn {\n        background: #7023ff;\n        border: 0;\n        padding: 12px 40px;\n        border-radius: 10px;\n        color: #fff;\n        font-size: 14px;\n      }\n      p.power {\n        font-size: 9px;\n        color: #b2acbf;\n      }\n    }\n\n    .billing-model-details {\n      margin-bottom: 1rem;\n      .billing-model-merchant-name {\n        > a {\n          text-decoration: none;\n        }\n      }\n      .billing-model-title {\n        ::-webkit-scrollbar {\n          display: none;\n        }\n        white-space: nowrap;\n        overflow: scroll;\n        text-overflow: '...';\n      }\n      .billing-model-price {\n        font-size: 2rem;\n      }\n      .billing-model-duration {\n        font-size: 0.8rem;\n        margin-bottom: 2rem;\n        color: #5c5c5c;\n      }\n    }\n    .code-wrap {\n      padding: 8px;\n      width: 100%;\n      height: 236px;\n      overflow-x: auto;\n      overflow-y: auto;\n      /* white-space: nowrap; */\n      /* overflow-x: hidden; */\n      background-color: #000;\n      color: #fff;\n      text-align: left;\n      line-height: 25px;\n      margin: 4px 4px 20px;\n      .body {\n        color: #e6db74;\n        font-size: 15px;\n        line-height: 2;\n        padding-left: 20px;\n\n        span.attribute {\n          color: #a6e22e;\n        }\n        input {\n          background: #242424;\n          width: 310px;\n        }\n      }\n    }\n\n    .frequency,\n    .trial-period-frequency {\n      #bm-trial-period-frequency,\n      #bm-frequency-period {\n        width: 110px;\n        background: black;\n      }\n      display: flex;\n      flex-wrap: wrap;\n    }\n\n    #bm-trial-period {\n      width: 150px;\n    }\n    #bm-trial-amount {\n      width: 200px;\n    }\n  }\n`;\n\nexport interface MerchantWidgetContainerProps {\n  billingModelType: BillingModelTypes;\n  billingModelDetails: any;\n  billingModelId?: string | null;\n  isPreview?: boolean;\n}\n\nconst MerchantWidgetContainer = ({\n  billingModelType,\n  billingModelId,\n  billingModelDetails,\n  isPreview = false,\n}: MerchantWidgetContainerProps) => {\n  const { t } = useTranslation();\n  const supportedTokens = useSupportedTokens();\n  // console.log('billingModelType: ', billingModelType);\n  // console.log(\"billingModelDetails: \", billingModelDetails);\n\n  const [copyWidgetUrl, setCopyWidgetUrl] = useState(false);\n  const [codeSnippet, setCodeSnippet] = useState('');\n\n  const [widget_billing_name, setWidgetBillingName] = useState('');\n  const [widget_billing_price, setWidgetBillingPrice] = useState(0);\n  const [widget_number_of_payment, setWidgetNumberOfPayment] = useState(0);\n  const [widget_trial_period, setWidgetTrialPeriod] = useState(0);\n  const [widget_frequency, setWidgetFrequency] = useState(0);\n  const [widget_initial_amount, setWidgetInitialAmount] = useState(0);\n  const [widget_token_currency, setWidgetTokenCurrency] = useState({\n    address: '0xc5d495EEaA84942095b769342bC71125721692Da',\n    symbol: 'PMA',\n    name: 'PumaPay',\n    decimals: 18,\n  });\n  const [durationPeriod, setDurationPeriod] = useState(DEFAULT_PERIOD_VALUE);\n  const [trailPeriodDuration, setTrailPeriodDuration] = useState(DEFAULT_PERIOD_VALUE);\n\n  const [widget_merchantName, setMerchantName] = useState('');\n  const [widget_merchantUrl, setMerchantUrl] = useState('');\n  const widgetData = {\n    bmName: {\n      value: widget_billing_name,\n      setter: setWidgetBillingName,\n    },\n    bmPrice: {\n      value: widget_billing_price,\n      setter: setWidgetBillingPrice,\n    },\n    bmNoOfPayments: {\n      value: widget_number_of_payment,\n      setter: setWidgetNumberOfPayment,\n    },\n    bmTrialPeriod: {\n      value: widget_trial_period,\n      setter: setWidgetTrialPeriod,\n    },\n    bmFrequency: {\n      value: widget_frequency,\n      setter: setWidgetFrequency,\n    },\n    bmInitialAmount: {\n      value: widget_initial_amount,\n      setter: setWidgetInitialAmount,\n    },\n    bmCurrency: {\n      value: widget_token_currency,\n      setter: setWidgetTokenCurrency,\n    },\n    bmDurationPeriod: {\n      value: durationPeriod,\n      setter: setDurationPeriod,\n    },\n    bmTrialDuration: {\n      value: trailPeriodDuration,\n      setter: setTrailPeriodDuration,\n    },\n  };\n\n  useEffect(() => {\n    setMerchantName(billingModelDetails?.merchantName);\n    setMerchantUrl(billingModelDetails?.merchantUrl);\n  }, [billingModelDetails]);\n\n  const BillingModelTypeForCodeSnippet = {\n    [BillingModelTypes.Recurring]: 'recurringPullPayment',\n    [BillingModelTypes.RecurringFreeTrial]: 'recurringPullPaymentWithFreeTrial',\n    [BillingModelTypes.RecurringPaidTrial]: 'recurringPullPaymentWithPaidTrial',\n    [BillingModelTypes.RecurringDynamic]: 'recurringDynamicPullPayment',\n    [BillingModelTypes.Single]: 'singlePullPayment',\n    [BillingModelTypes.SingleDynamic]: 'singleDynamicPullPayment',\n  };\n\n  useEffect(() => {\n    if (!billingModelType) return;\n    let template = `\n        <!-- !! Please DO NOT Update OR Edit the BillingModelId and BillingModelType !! -->\n        <!-- !! NOTE: The UniqueReference can be used so that the merchant can specify\n            a unique string to so that this subscription can be identified.\n            If the merchant does not specify UniqueReference, one will be created on the smart contract -->`;\n\n    switch (billingModelType) {\n      case String(BillingModelTypes.Single):\n      case String(BillingModelTypes.RecurringPaidTrial):\n      case String(BillingModelTypes.RecurringFreeTrial):\n      case String(BillingModelTypes.Recurring):\n        template += `<PumaPayWidget\n                        BillingModelId=\"${billingModelId}\"\n                        BillingModelType=\"${BillingModelTypeForCodeSnippet[billingModelType]}\"\n                        UniqueReference=\"\"\n                      ></PumaPayWidget>`;\n        break;\n      case String(BillingModelTypes.SingleDynamic):\n        template += `<PumaPayWidget\n                      BillingModelId=\"${billingModelId}\"\n                      BillingModelType=\"${BillingModelTypeForCodeSnippet[billingModelType]}\"\n                      UniqueReference=\"\"\n                      BillingModelName=\"${widget_billing_name}\"\n                      SellingPrice=\"${widget_billing_price}\"\n                      SellingToken=\"${widget_token_currency?.address}\"\n                    ></PumaPayWidget>`;\n        break;\n      case String(BillingModelTypes.RecurringDynamic):\n        template += `<PumaPayWidget\n                        BillingModelId=\"${billingModelId}\"\n                        BillingModelType=\"${BillingModelTypeForCodeSnippet[billingModelType]}\"\n                        UniqueReference=\"\"\n                        BillingModelName=\"${widget_billing_name}\"\n                        SellingPrice=\"${widget_billing_price}\"\n                        SellingToken=\"${widget_token_currency?.address}\"\n                        NumberOfPayments=\"${widget_number_of_payment}\"\n                        Frequency=\"${widget_frequency * durationPeriod.periodInSeconds}\"\n                        ${\n                          billingModelDetails?.trialType !== BMTrialTypes.NoTrial\n                            ? `TrialPeriod=\"${widget_trial_period * trailPeriodDuration.periodInSeconds}\"`\n                            : ''\n                        }\n                        ${\n                          billingModelDetails?.trialType === BMTrialTypes.PaidTrial\n                            ? `InitialAmount=\"${widget_initial_amount}\"`\n                            : ''\n                        }\n                      >\n                    </PumaPayWidget>`;\n        break;\n      default:\n        console.error('Invalid billing model type!!');\n        return;\n    }\n    template += `\\n<script src=\"https://assets.pumapay.io/widget${\n      process.env.REACT_APP_ENV === 'TEST' ? '-dev/' : '/'\n    }widgetScript.js\"></script>`;\n    setCodeSnippet(template);\n  }, [\n    widget_billing_name,\n    widget_billing_price,\n    widget_number_of_payment,\n    widget_trial_period,\n    widget_frequency,\n    widget_initial_amount,\n    widget_token_currency,\n    durationPeriod,\n    trailPeriodDuration,\n    billingModelType,\n    billingModelId,\n  ]);\n\n  const CopyWidgetPreviewUrl = () => {\n    navigator.clipboard.writeText(codeSnippet).then(\n      () => {\n        // console.log(\"Copying to clipboard was successful!\");\n        setCopyWidgetUrl(true);\n        setTimeout(() => {\n          setCopyWidgetUrl(false);\n        }, 3000);\n      },\n      err => {\n        console.error('Could not copy text: ' + err);\n      },\n    );\n  };\n  return (\n    <WidgetContent>\n      <Tabs defaultActiveKey=\"widget\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\n        <Tab eventKey=\"widget\" title=\"Widget\">\n          <p>{t('widgetDescription')}</p>\n          <p>{t('widgetNote')}</p>\n          <div className={`notice-box ${BillingModelTypes[billingModelType]}`}>\n            <div className=\"billing-model-details\">\n              <h4 className=\"billing-model-title\">\n                {isDynamicBM(BillingModelTypes[billingModelType])\n                  ? widget_billing_name !== ''\n                    ? widget_billing_name\n                    : '{Billing Model Name}'\n                  : billingModelDetails?.name}\n              </h4>\n              <div className=\"billing-model-merchant-name\">\n                <a\n                  href={widget_merchantUrl ? widget_merchantUrl : billingModelDetails?.merchantUrl}\n                  rel=\"noreferrer\"\n                  target={'_blank'}\n                >\n                  {isDynamicBM(BillingModelTypes[billingModelType])\n                    ? widget_merchantName !== ''\n                      ? widget_merchantName\n                      : '{Merchant Name}'\n                    : billingModelDetails?.merchantName}\n                </a>\n              </div>\n              <div className=\"billing-model-price\">\n                {isDynamicBM(BillingModelTypes[billingModelType]) ? (\n                  widget_billing_price !== 0 ? (\n                    `${widget_billing_price} ${widget_token_currency?.symbol}`\n                  ) : (\n                    '{000} {XXX}'\n                  )\n                ) : (\n                  <>\n                    {billingModelDetails?.amount / 10 ** supportedTokens?.[billingModelDetails?.token]?.decimals}\n                    &nbsp;\n                    {supportedTokens?.[billingModelDetails?.token]?.symbol}\n                  </>\n                )}\n              </div>\n              <div className=\"billing-model-duration\">\n                {isAnySingleBM(BillingModelTypes[billingModelType]) ? (\n                  'One time payment'\n                ) : (\n                  <>\n                    {`You will be charged every ${\n                      isDynamicBM(BillingModelTypes[billingModelType])\n                        ? widget_frequency && widget_frequency !== 0\n                          ? humanizeDuration(widget_frequency * durationPeriod?.periodInSeconds, {\n                              largest: 1,\n                              round: true,\n                              unitMeasures: UNIT_MEASURES,\n                            })\n                          : '{XXX}'\n                        : humanizeDuration(billingModelDetails?.frequency, {\n                            largest: 1,\n                            round: true,\n                            unitMeasures: UNIT_MEASURES,\n                          })\n                    }`}\n                    <br />\n                    {`until ${\n                      isDynamicBM(BillingModelTypes[billingModelType])\n                        ? widget_frequency &&\n                          widget_number_of_payment &&\n                          widget_frequency !== 0 &&\n                          widget_number_of_payment !== 0\n                          ? moment(\n                              moment.now() +\n                                widget_frequency * durationPeriod.periodInSeconds * widget_number_of_payment * 1000,\n                            ).format('ll')\n                          : '{XXX}'\n                        : moment(\n                            moment.now() +\n                              billingModelDetails?.numberOfPayments * billingModelDetails?.frequency * 1000,\n                          ).format('ll')\n                    }`}\n                    <br />\n                    {`(${\n                      isDynamicBM(BillingModelTypes[billingModelType])\n                        ? widget_number_of_payment && widget_number_of_payment !== 0\n                          ? widget_number_of_payment\n                          : '{XXX}'\n                        : billingModelDetails?.numberOfPayments\n                    } charges in total)`}\n                    {(isDynamicBM(BillingModelTypes[billingModelType]) ||\n                      isRecurringWithTrial(BillingModelTypes[billingModelType])) && (\n                      <>\n                        <br />\n                        {widget_trial_period === BMTrialTypes.NoTrial ||\n                        billingModelDetails?.trialType === BMTrialTypes.NoTrial\n                          ? ''\n                          : BillingModelTypes[billingModelType] === BillingModelTypes.RecurringFreeTrial ||\n                            billingModelDetails?.trialType === BMTrialTypes.FreeTrial ||\n                            widget_trial_period === BMTrialTypes.FreeTrial\n                          ? 'You have a free trial'\n                          : `You have a trial (${\n                              isDynamicBM(BillingModelTypes[billingModelType])\n                                ? widget_initial_amount\n                                  ? widget_initial_amount\n                                  : '{XXX}'\n                                : fromTokenDecimals(\n                                    billingModelDetails?.initialAmount.toString(),\n                                    supportedTokens?.[billingModelDetails?.token]?.decimals.toString(),\n                                  )\n                            } ${\n                              supportedTokens?.[billingModelDetails?.token]?.symbol\n                                ? supportedTokens?.[billingModelDetails?.token]?.symbol\n                                : widget_token_currency.symbol\n                            })`}\n                        {widget_trial_period === BMTrialTypes.NoTrial ||\n                        billingModelDetails?.trialType === BMTrialTypes.NoTrial\n                          ? ''\n                          : ' of '}\n                        {isDynamicBM(BillingModelTypes[billingModelType])\n                          ? widget_trial_period && widget_trial_period !== 0\n                            ? ` ${widget_trial_period} ${trailPeriodDuration.label}`\n                            : widget_trial_period === BMTrialTypes.NoTrial ||\n                              billingModelDetails?.trialType === BMTrialTypes.NoTrial\n                            ? ''\n                            : '{XXX}'\n                          : humanizeDuration(billingModelDetails?.trialPeriod, {\n                              largest: 1,\n                              round: true,\n                              unitMeasures: UNIT_MEASURES,\n                            })}\n                      </>\n                    )}\n                    <br />\n                    <br />\n                    Note: You can cancel your subscription at any time\n                  </>\n                )}\n              </div>\n            </div>\n            <button className=\"connect-btn\">Connect Wallet</button>\n            <p className=\"power\">Powered by PumaPay v3.0</p>\n          </div>\n        </Tab>\n        {!isPreview && (\n          <Tab eventKey=\"code\" title=\"Code\" tabClassName={isPreview ? 'disabled' : ''} disabled={isPreview}>\n            <p>Copy the code snippet and add it to your website</p>\n            <div className=\"code-wrap\">\n              <pre>\n                <code>\n                  <span className=\"tags\">&lt;PumaPayWidget</span>\n                  <div className=\"body\">\n                    <span className=\"attribute\">BillingModelId</span>={`\"${billingModelId}\"`}\n                    <br />\n                    <span className=\"attribute\">BillingModelType</span>=\n                    {`\"${BillingModelTypeForCodeSnippet[billingModelType]}\"`}\n                    <br />\n                    <span className=\"attribute\">UniqueReference</span>={`\"\"`}\n                    <br />\n                    {isDynamicBM(BillingModelTypes[billingModelType]) && (\n                      <>\n                        <span className=\"attribute\">BillingModelName</span>={`\"${widget_billing_name}\"`}\n                        <br />\n                        <span className=\"attribute\">SellingPrice</span>={`\"${widget_billing_price}\"`}\n                        <br />\n                        <span className=\"attribute\">SellingToken</span>={`\"${widget_token_currency?.address}\"`}\n                        <br />\n                        {BillingModelTypes[billingModelType] === BillingModelTypes.RecurringDynamic && (\n                          <>\n                            <span className=\"attribute\">NumberOfPayments</span>={`\"${widget_number_of_payment}\"`}\n                            <br />\n                            <span className=\"attribute\">Frequency</span>=\n                            {`\"${widget_frequency * durationPeriod.periodInSeconds}\"`}\n                            <br />\n                            {billingModelDetails?.trialType !== BMTrialTypes.NoTrial && (\n                              <>\n                                <span className=\"attribute\">TrialPeriod</span>=\n                                {`\"${widget_trial_period * trailPeriodDuration.periodInSeconds}\"`}\n                                <br />\n                              </>\n                            )}\n                            {billingModelDetails?.trialType == BMTrialTypes.PaidTrial && (\n                              <>\n                                <span className=\"attribute\">InitialAmount</span>={`\"${widget_initial_amount}\"`}\n                                <br />\n                              </>\n                            )}\n                          </>\n                        )}\n                      </>\n                    )}\n                  </div>\n                  &gt;\n                  <span className=\"tags\">&lt;/PumaPayWidget&gt; </span>\n                  <br />\n                  <span className=\"tags\">&lt;script</span>\n                  <div className=\"body\">\n                    <span className=\"attribute\">src</span>\n                    =\"https://assets.pumapay.io/widget\n                    {process.env.REACT_APP_ENV === 'TEST' ? '-dev/' : '/'}\n                    widgetScript.js\"\n                  </div>\n                  &gt;\n                  <span className=\"tags\">&lt;/script&gt;</span>\n                </code>\n              </pre>\n            </div>\n          </Tab>\n        )}\n        {isDynamicBM(BillingModelTypes[billingModelType]) && !isPreview && IS_CONFIG_FEAT_ENABLED && (\n          <Tab eventKey=\"config\" title=\"Configuration\" tabClassName={isPreview ? 'disabled' : ''} disabled={isPreview}>\n            <p>You can configure the dynamic fields of your billing model </p>\n            <ConfigContent\n              billingModelId={billingModelId}\n              billingModelType={billingModelType}\n              billingModelDetails={billingModelDetails}\n              widgetData={widgetData}\n            />\n          </Tab>\n        )}\n        {!isPreview && (\n          <Tab eventKey=\"css\" title=\"CSS\" tabClassName={isPreview ? 'disabled' : ''} disabled={isPreview}>\n            <p>You will be able to customise the look and feel of the widget.</p>\n            <div style={{ width: '100%', textAlign: 'center' }}>Coming Soon!</div>\n          </Tab>\n        )}\n      </Tabs>\n\n      {!isPreview && (\n        <div className=\"code-copy\">\n          <ButtonPrimary id=\"CopyButtonPrimary\" onClick={() => CopyWidgetPreviewUrl()}>\n            {copyWidgetUrl ? 'Copied' : `Copy`}\n          </ButtonPrimary>\n        </div>\n      )}\n    </WidgetContent>\n  );\n};\n\nexport default MerchantWidgetContainer;\n","import { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { AutoColumn } from '../../components/Column';\nimport { useActiveWeb3React } from '../../hooks';\nimport {\n  BillingModelTypes,\n  BillingModelTypeTitles,\n  BMTrialTypes,\n  calculateGasMargin,\n  calculateGasMargin15,\n  isAnySingleBM,\n  WAIT_BLOCK_CONFIRMATIONS,\n} from '../../utils';\nimport { ButtonPrimary } from '../../components/Button';\nimport { Box } from 'rebass/styled-components';\nimport {\n  useDynamicRecurringPPContract,\n  useFreeTrialRecurringPPContract,\n  usePaidTrialRecurringPPContract,\n  useRecurringPPContract,\n  useSingleDynamicPPContract,\n  useSinglePPContract,\n} from '../../hooks/useContract';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { TransactionReceipt, TransactionResponse } from '@ethersproject/providers';\nimport { addTransaction } from '../../state/transactions/actions';\nimport { useToken } from '../../hooks/Tokens';\nimport { useDispatch } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport { InfoCard } from '../../components/InfoCard';\nimport { NavToggle } from '../App';\nimport ProgressBar from '../../components/ProgressBar';\nimport ArrowRight from '../../assets/images/back-arrow.svg';\nimport Loader from '../../components/Loader';\nimport { Contract } from '@ethersproject/contracts';\nimport MerchantWidgetContainer from '../../components/MerchantWidget';\n\nconst MainContent = styled.div`\n  .sideContent {\n    margin-bottom: 90px;\n  }\n  .tab-wrapper {\n    margin-top: 25px;\n    .tab-content .tab-pane {\n      display: none;\n      &.active {\n        display: block;\n      }\n      h3 {\n        font-size: 16px;\n        font-weight: 500;\n      }\n\n      .btn-theme {\n        background: #7023ff;\n        border: 0;\n        padding: 12px 40px;\n        border-radius: 10px;\n        color: #fff;\n        font-size: 14px;\n      }\n      p.power {\n        font-size: 9px;\n        color: #b2acbf;\n      }\n      p {\n        font-size: 14px;\n        color: #756f82;\n        margin-bottom: 20px;\n      }\n      .notice-box {\n        box-shadow: 2px 5px 10px 2px #4a435926;\n        border-radius: 15px;\n        padding: 30px 30px 80px;\n        text-align: center;\n        margin-bottom: 20px;\n      }\n      .code-box {\n        background: #1a1526;\n        color: #cbcbcb;\n        padding: 10px 20px;\n        border-radius: 8px;\n        table tr td:first-child {\n          padding: 0 20px 0 0;\n        }\n      }\n    }\n    .tab-menu {\n      display: flex;\n      border-bottom: 1px solid #ddd;\n      margin-bottom: 20px;\n      font-size: 14px;\n      .tab-item {\n        padding: 7px 9px;\n        color: #756f82;\n        cursor: pointer;\n      }\n\n      .tab-item.active {\n        color: #7023ff;\n        border-bottom: 2px solid #7023ff;\n      }\n    }\n  }\n  .tab-footer {\n    display: flex;\n    justify-content: space-between;\n\n    .code-copy {\n      display: flex;\n      align-items: center;\n    }\n  }\n  .arrow {\n    margin: 0 20px 0 0;\n    padding-top: 1.7rem;\n    cursor: pointer;\n  }\n  &.open {\n    padding-left: 220px;\n    height: 80vh;\n    overflow-y: hidden;\n    margin-top: 1rem;\n    padding-right: 2rem;\n  }\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  padding-left: 100px;\n  padding-right: 20px;\n`;\nconst BtnWrapper = styled.div`\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  left: 0;\n  padding: 20px;\n  background: #fff;\n  border-top: 1px solid #ddd;\n  text-align: right;\n  button {\n    width: 120px;\n    height: 40px;\n    font-size: 14px;\n    border-radius: 10px;\n    display: inline-block;\n    padding: 5px !important;\n  }\n`;\nconst MarginLeft = styled.div`\n  margin-left: 0;\n`;\n\nexport default function CreateWidget() {\n  const { t } = useTranslation();\n  const { account, chainId } = useActiveWeb3React();\n  const { state } = useLocation();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const selectNavToggle = useContext(NavToggle);\n\n  const [loading, setLoading] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n\n  const [merchantName, setMerchantName] = useState<string>('');\n  const [merchantUrl, setMerchantUrl] = useState<string>('');\n  const [reference, setReference] = useState<string>('');\n\n  const [billingCreateType, setBillingCreateType] = useState(null);\n  const [updateBilling, setUpdateBilling] = useState(false);\n  const [billingModelId, setBillingModelId] = useState(null);\n  // single billing\n  const [billingName, setBillingName] = useState(null);\n  const [billingAmount, setBillingAmount] = useState(null);\n  const [billingCurrency, setBillingCurrency] = useState(null);\n  // single dynamic\n  const [isDynamicBM, setIsDynamicBM] = useState(false);\n\n  // ----------- recurring-billing -----------------\n  const [numberOfTrialPeriods, setNumberOfTrialPeriods] = useState<Number>(1);\n  const [bmFrequency, setBmFrequency] = useState(1);\n  const [bmFrequencyInSeconds, setBmFrequencyInSeconds] = useState(1);\n\n  const [numberOfPayments, setNumberOfPayments] = useState<Number>(null);\n  const [noOfDurationPeriods, setNoOfDurationPeriod] = useState(1);\n  const [bmFrequencyPeriod, setbmFrequencyPeriod] = useState({\n    label: 'Hourly',\n    periodInSeconds: 3600,\n  });\n  const [durationPeriod, setPaymentFrequency] = useState({\n    label: 'Hourly',\n    periodInSeconds: 3600,\n  });\n  const [trialPeriod, setTrialPeriod] = useState({\n    label: 'Days',\n    periodInSeconds: 86400,\n  });\n  const [initialAmount, setInitialAmount] = useState(1);\n  const [trialType, setTrialType] = useState<Number>(1);\n  // -------------------------------\n\n  const getBillingModelDetails = () => {\n    console.log('need to retrieve missing bm details');\n  };\n\n  //check billing details\n  useEffect(() => {\n    if (state) {\n      setIsEdit(state['isEdit']);\n      setBillingName(state['title']);\n      setMerchantName(state['merchantName']);\n      setMerchantUrl(state['merchantUrl']);\n      setReference(state['reference']);\n      setBillingAmount(state['price']);\n      setBillingCurrency(state['currency']);\n      setIsDynamicBM(state['checked']);\n      setNumberOfTrialPeriods(state['numberOfTrialPeriods']);\n      setNoOfDurationPeriod(state['noOfDurationPeriods']);\n      setBmFrequency(state['bmFrequency']);\n      setbmFrequencyPeriod(state['bmFrequencyPeriod']);\n      setPaymentFrequency(state['durationPeriod']);\n      setTrialPeriod(state['trialPeriod']);\n      setInitialAmount(state['initialAmount']);\n      setBillingCreateType(state['billingModelType']);\n      setTrialType(state['trialType']);\n      setUpdateBilling(state['onUpdate']);\n      setBillingModelId(state['billingModelId']);\n      setBmFrequencyInSeconds(\n        state['bmFrequencyPeriod'] ? state['bmFrequency'] * state['bmFrequencyPeriod'].periodInSeconds : null,\n      );\n      setNumberOfPayments(\n        state['durationPeriod']\n          ? Math.floor(\n              (state['durationPeriod'].periodInSeconds * state['noOfDurationPeriods']) /\n                (state['bmFrequency'] * state['bmFrequencyPeriod'].periodInSeconds),\n            )\n          : null,\n      );\n    }\n  }, [state]);\n\n  if (!state) {\n    getBillingModelDetails();\n  }\n\n  const singleBContract = useSinglePPContract();\n  const singleDynamicBContract = useSingleDynamicPPContract();\n  const recurringPPContract = useRecurringPPContract();\n  const recurringDynamicContract = useDynamicRecurringPPContract();\n  const freeTrialContract = useFreeTrialRecurringPPContract();\n  const paidTrialContract = usePaidTrialRecurringPPContract();\n\n  const token = useToken(state?.['currency']['address']);\n\n  const navigateToBMDetailsPage = (bmType: BillingModelTypes, txReceipt: TransactionReceipt) => {\n    history.push(\n      `/merchant/billing-model-details?billing-model-type=${BillingModelTypes[bmType]}&billing-model-id=${txReceipt[\n        'events'\n      ][0].args[0].toString()}`,\n    );\n  };\n\n  const handleSuccessfulBlockchainTx = async (\n    response: TransactionResponse,\n    bmType: BillingModelTypes,\n    paymentAmount?: string,\n    isUpdate = false,\n  ) => {\n    const summary = `${BillingModelTypeTitles[bmType]} billing model ${isUpdate ? 'updated' : 'created'}`;\n    const hash = response.hash;\n    const bmCreation = {\n      tokenAddress: token?.address,\n      amount: paymentAmount ? paymentAmount : 'Dynamic',\n      name: billingName,\n      merchantName,\n      merchantUrl,\n      uniqueReference: reference,\n    };\n    dispatch(\n      addTransaction({\n        hash,\n        from: account,\n        chainId,\n        bmCreation,\n        summary,\n      }),\n    );\n    const txReceipt = await response.wait(WAIT_BLOCK_CONFIRMATIONS);\n    setLoading(false);\n    navigateToBMDetailsPage(bmType, txReceipt);\n  };\n\n  const handleFailedBMCreation = (error, bmType) => {\n    setLoading(false);\n    console.debug(`Failed to create BM for ${bmType}. Reason: ${error.message}`);\n    throw error;\n  };\n\n  const onCreateSingleAndDynamicBilling = async () => {\n    if (!state?.['currency']['address']) {\n      alert('invalid currency address');\n      history.push('/merchant/dashboard');\n    }\n    setLoading(true);\n    if (BillingModelTypes[billingCreateType] === BillingModelTypes.SingleDynamic) {\n      await handleSingleDynamicBMCreation(\n        singleDynamicBContract,\n        BillingModelTypes.SingleDynamic,\n        String(billingAmount),\n      );\n    } else {\n      await handleSingleBMCreation(singleBContract, BillingModelTypes.Single, String(billingAmount));\n    }\n  };\n\n  const handleSingleDynamicBMCreation = async (\n    contract: Contract,\n    bmType: BillingModelTypes,\n    paymentAmount: string,\n  ) => {\n    const estimatedGas: BigNumber = await contract.estimateGas\n      .createBillingModel(account, merchantName, reference, merchantUrl)\n      .catch(e => {\n        console.error(e);\n        return null;\n      });\n\n    return contract\n      .createBillingModel(account, merchantName, reference, merchantUrl, {\n        gasLimit: calculateGasMargin15(estimatedGas),\n      })\n      .then(async (response: TransactionResponse) => {\n        setLoading(true);\n        await handleSuccessfulBlockchainTx(response, bmType, paymentAmount);\n      })\n      .catch((error: Error) => {\n        handleFailedBMCreation(error, bmType);\n      });\n  };\n\n  const handleSingleBMCreation = async (contract: Contract, bmType: BillingModelTypes, paymentAmount: string) => {\n    setLoading(true);\n    const estimatedGas: BigNumber = await contract.estimateGas\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n      )\n      .catch(e => {\n        console.error(e);\n        return null;\n      });\n    return contract\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n        {\n          gasLimit: calculateGasMargin15(estimatedGas),\n        },\n      )\n      .then(async (response: TransactionResponse) => {\n        setLoading(true);\n        await handleSuccessfulBlockchainTx(response, bmType, paymentAmount);\n      })\n      .catch((error: Error) => {\n        handleFailedBMCreation(error, bmType);\n      });\n  };\n\n  const handleDynamicRecurringBMCreation = async (contract: Contract, bmType: BillingModelTypes) => {\n    const estimatedGas: BigNumber = await contract.estimateGas\n      .createBillingModel(account, trialType, merchantName, reference, merchantUrl)\n      .catch(e => {\n        console.error(e);\n        return null;\n      });\n\n    return contract\n      .createBillingModel(account, trialType, merchantName, reference, merchantUrl, {\n        gasLimit: calculateGasMargin(estimatedGas),\n      })\n      .then(async (response: TransactionResponse) => {\n        setLoading(true);\n        await handleSuccessfulBlockchainTx(response, bmType);\n      })\n      .catch((error: Error) => {\n        handleFailedBMCreation(error, bmType);\n      });\n  };\n\n  const handleRecurringBMCreation = async (contract: Contract, bmType: BillingModelTypes, paymentAmount: string) => {\n    const estimatedGas: BigNumber = await contract.estimateGas\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n        bmFrequencyInSeconds,\n        numberOfPayments,\n      )\n      .catch(e => {\n        console.error(e);\n        return null;\n      });\n\n    return contract\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n        bmFrequencyInSeconds,\n        numberOfPayments,\n        {\n          gasLimit: calculateGasMargin(estimatedGas),\n        },\n      )\n      .then(async (response: TransactionResponse) => {\n        setLoading(true);\n        await handleSuccessfulBlockchainTx(response, bmType);\n      })\n      .catch((error: Error) => {\n        handleFailedBMCreation(error, bmType);\n      });\n  };\n\n  const handleRecurringFreeTrialBMCreation = async (\n    contract: Contract,\n    bmType: BillingModelTypes,\n    paymentAmount: string,\n  ) => {\n    const estimatedGas: BigNumber = await contract.estimateGas\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n        bmFrequencyInSeconds,\n        (Number(trialPeriod.periodInSeconds) * Number(numberOfTrialPeriods)).toString(),\n        numberOfPayments,\n      )\n      .catch(e => {\n        console.error(e);\n        return null;\n      });\n    return contract\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n        bmFrequencyInSeconds,\n        (Number(trialPeriod.periodInSeconds) * Number(numberOfTrialPeriods)).toString(),\n        numberOfPayments,\n        {\n          gasLimit: calculateGasMargin(estimatedGas),\n        },\n      )\n      .then(async (response: TransactionResponse) => {\n        setLoading(true);\n        await handleSuccessfulBlockchainTx(response, bmType);\n      })\n      .catch((error: Error) => {\n        handleFailedBMCreation(error, bmType);\n      });\n  };\n\n  const handleRecurringPaidTrialBMCreation = async (\n    contract: Contract,\n    bmType: BillingModelTypes,\n    paymentAmount: string,\n  ) => {\n    const estimatedGas: BigNumber = await contract.estimateGas\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n        bmFrequencyInSeconds,\n        (Number(trialPeriod.periodInSeconds) * Number(numberOfTrialPeriods)).toString(),\n        String(initialAmount),\n        numberOfPayments,\n      )\n      .catch(e => {\n        console.error(e);\n        return null;\n      });\n    return contract\n      .createBillingModel(\n        account,\n        billingName,\n        merchantName,\n        reference,\n        merchantUrl,\n        paymentAmount,\n        billingCurrency?.address,\n        bmFrequencyInSeconds,\n        (Number(trialPeriod.periodInSeconds) * Number(numberOfTrialPeriods)).toString(),\n        String(initialAmount),\n        numberOfPayments,\n        {\n          gasLimit: calculateGasMargin(estimatedGas),\n        },\n      )\n      .then(async (response: TransactionResponse) => {\n        setLoading(true);\n        await handleSuccessfulBlockchainTx(response, bmType);\n      })\n      .catch((error: Error) => {\n        handleFailedBMCreation(error, bmType);\n      });\n  };\n\n  const goToPreviousPath = () => {\n    if (\n      BillingModelTypes[billingCreateType] === BillingModelTypes.Single ||\n      BillingModelTypes[billingCreateType] === BillingModelTypes.SingleDynamic\n    ) {\n      history.push({\n        pathname: isEdit\n          ? `/merchant/single-billing/edit-billing-model?billing-model-type=${billingCreateType}&billing-model-id=${billingModelId}`\n          : '/merchant/create/single-billing-model',\n        state: {\n          name: billingName,\n          amount: billingAmount,\n          token: billingCurrency?.address,\n          merchantName: merchantName,\n          uniqueReference: reference,\n          merchantUrl: merchantUrl,\n          isDynamic: BillingModelTypes[billingCreateType] === BillingModelTypes.SingleDynamic,\n        },\n      });\n    } else {\n      history.push({\n        pathname: isEdit\n          ? `/merchant/recurring-billing/edit-billing-model?billing-model-type=${billingCreateType}&billing-model-id=${billingModelId}`\n          : '/merchant/create/recurring-billing-model',\n        state: {\n          name: billingName,\n          merchantName: merchantName,\n          uniqueReference: reference,\n          merchantUrl: merchantUrl,\n          amount: billingAmount,\n          token: billingCurrency?.address,\n          numberOfTrialPeriods: numberOfTrialPeriods,\n          noOfDurationPeriods: noOfDurationPeriods,\n          durationPeriod: durationPeriod,\n          bmFrequency: bmFrequency,\n          bmFrequencyPeriod: bmFrequencyPeriod,\n          trialType: trialType,\n          initialAmount: initialAmount,\n          trialPeriod: trialPeriod,\n          isDynamic: BillingModelTypes[billingCreateType] === BillingModelTypes.RecurringDynamic,\n        },\n      });\n    }\n  };\n  const onCreateRecurringAndDynamicBilling = async () => {\n    setLoading(true);\n    if (BillingModelTypes[billingCreateType] === BillingModelTypes.RecurringDynamic) {\n      await handleDynamicRecurringBMCreation(recurringDynamicContract, BillingModelTypes.RecurringDynamic);\n    } else {\n      switch (trialType) {\n        case BMTrialTypes.FreeTrial:\n          await handleRecurringFreeTrialBMCreation(\n            freeTrialContract,\n            BillingModelTypes.RecurringFreeTrial,\n            String(billingAmount),\n          );\n          break;\n        case BMTrialTypes.PaidTrial:\n          await handleRecurringPaidTrialBMCreation(\n            paidTrialContract,\n            BillingModelTypes.RecurringPaidTrial,\n            String(billingAmount),\n          );\n          break;\n        case BMTrialTypes.NoTrial:\n        default:\n          await handleRecurringBMCreation(recurringPPContract, BillingModelTypes.Recurring, String(billingAmount));\n          break;\n      }\n    }\n  };\n\n  const onUpdateSingleBilling = async () => {\n    const estimatedGas = await singleBContract.estimateGas.editBillingModel(\n      billingModelId,\n      account,\n      billingName,\n      String(billingAmount),\n      billingCurrency?.address,\n      merchantName,\n      merchantUrl,\n    );\n    setLoading(true);\n    return singleBContract\n      .editBillingModel(\n        billingModelId,\n        account,\n        billingName,\n        String(billingAmount),\n        billingCurrency?.address,\n        merchantName,\n        merchantUrl,\n        {\n          gasLimit: calculateGasMargin15(estimatedGas),\n        },\n      )\n      .then(async (response: TransactionResponse) => {\n        await handleSuccessfulBlockchainTx(response, BillingModelTypes.Single, billingAmount, true);\n      })\n      .catch((error: Error) => {\n        setLoading(false);\n        console.debug('Failed to update billing model. Reason:', error);\n        throw error;\n      });\n  };\n\n  const onUpdateRecurringBilling = async () => {\n    let contract;\n    switch (trialType) {\n      case BMTrialTypes.FreeTrial:\n        contract = freeTrialContract;\n        break;\n      case BMTrialTypes.PaidTrial:\n        contract = paidTrialContract;\n        break;\n      case BMTrialTypes.NoTrial:\n        contract = recurringPPContract;\n        break;\n    }\n    const estimatedGas: BigNumber = await contract.estimateGas.editBillingModel(\n      billingModelId,\n      account,\n      billingName,\n      merchantName,\n      merchantUrl,\n    );\n    setLoading(true);\n    return contract\n      .editBillingModel(billingModelId, account, billingName, merchantName, merchantUrl, {\n        gasLimit: calculateGasMargin(estimatedGas),\n      })\n      .then(async (response: TransactionResponse) => {\n        await handleSuccessfulBlockchainTx(response, BillingModelTypes[billingCreateType], billingAmount, true);\n      })\n      .catch((error: Error) => {\n        setLoading(false);\n        console.debug('Failed to edit billing model. Reason:', error);\n        throw error;\n      });\n  };\n  const billingModelDetails = {\n    name: billingName,\n    merchantName: merchantName,\n    merchantUrl: merchantUrl,\n    amount: billingAmount,\n    token: billingCurrency?.address,\n    trialType: trialType,\n    numberOfPayments: numberOfPayments ? numberOfPayments : null,\n    frequency: bmFrequencyInSeconds ? bmFrequencyInSeconds : null,\n    initialAmount: initialAmount,\n    trialPeriod: trialPeriod ? trialPeriod.periodInSeconds * Number(String(numberOfTrialPeriods)) : null,\n  };\n\n  const handleBMCreation = e => {\n    e.preventDefault();\n    if (isAnySingleBM(BillingModelTypes[billingCreateType])) {\n      if (updateBilling) {\n        onUpdateSingleBilling()\n          .then(async r => {})\n          .catch(e => console.error(e));\n        return;\n      }\n      onCreateSingleAndDynamicBilling()\n        .then(async r => {})\n        .catch(e => console.error(e));\n    } else {\n      if (updateBilling) {\n        onUpdateRecurringBilling()\n          .then(async r => {})\n          .catch(e => console.error(e));\n        return;\n      }\n      onCreateRecurringAndDynamicBilling()\n        .then(async r => {})\n        .catch(e => console.error(e));\n    }\n  };\n\n  return (\n    <>\n      <MainContent className={selectNavToggle ? ' open' : ''}>\n        <ProgressBar />\n        <div className=\"arrow\">\n          <img src={ArrowRight} alt=\"arrow\" onClick={goToPreviousPath} />\n        </div>\n        <div className=\"sideContent\">\n          <MarginLeft>\n            <AutoColumn style={{ width: '55%' }} gap=\"lg\" justify=\"center\">\n              <InfoCard title={t('preview')} info={t('previewDescription')} />\n            </AutoColumn>\n          </MarginLeft>\n          <MerchantWidgetContainer\n            billingModelType={BillingModelTypes[billingCreateType]}\n            billingModelDetails={billingModelDetails}\n            isPreview={true}\n          />\n        </div>\n        <Box as=\"form\" onSubmit={e => handleBMCreation(e)}>\n          <BtnWrapper className=\"btn-wrap\" style={{ zIndex: 1 }}>\n            <ButtonPrimary\n              style={{\n                borderColor: '#B2ACBF',\n                marginRight: '10px',\n                background: 'transparent',\n                color: '#000',\n                width: '130px',\n                display: 'inline-block',\n                padding: '10px',\n                borderRadius: '10px',\n              }}\n              as={Link}\n              to=\"/merchant/create/choose-billing-model-type\"\n            >{`Cancel`}</ButtonPrimary>\n            <ButtonPrimary\n              // disabled={!canCreate}\n              id=\"create-bm-button\"\n              style={{ padding: 16 }}\n            >\n              {updateBilling ? loading ? <Loader /> : 'Update' : loading ? <Loader /> : 'Create'}\n            </ButtonPrimary>\n          </BtnWrapper>\n        </Box>\n      </MainContent>\n    </>\n  );\n}\n"],"sourceRoot":""}